import os
import io
import json
import logging
import time
from typing import Dict, Optional, Any, Union
from pathlib import Path
from dataclasses import asdict
from pydub import AudioSegment
from config import config

logger = logging.getLogger(__name__)

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò/–ö–û–ù–°–¢–ê–ù–¢–´ ===
SUPPORTED_FORMATS: Dict[str, Dict[str, str]] = {
    "wav": {"extension": "wav", "quality": "lossless"},
    "mp3": {"extension": "mp3", "quality": "320k"},
    "flac": {"extension": "flac", "quality": "lossless"},
    "aac": {"extension": "m4a", "quality": "256k"},
}

# === –£–¢–ò–õ–´ –í–ù–ï –ö–õ–ê–°–°–ê (–±—ã–ª–∏ self.*) ===
def serialize_for_json(obj: Any) -> Any:
    if hasattr(obj, "__dataclass_fields__"):
        return asdict(obj)
    if hasattr(obj, "__dict__"):
        return {k: serialize_for_json(v) for k, v in obj.__dict__.items()}
    if isinstance(obj, (list, tuple)):
        return [serialize_for_json(x) for x in obj]
    if isinstance(obj, dict):
        return {k: serialize_for_json(v) for k, v in obj.items()}
    if isinstance(obj, (str, int, float, bool, type(None))):
        return obj
    return str(obj)


def ensure_directory(path: Path) -> bool:
    try:
        target = path if path.suffix == "" else path.parent
        target.mkdir(parents=True, exist_ok=True)
        return True
    except Exception as e:
        logger.error(f"‚ùå Cannot create directory {path}: {e}")
        return False


def bytes_to_audiosegment(audio_data: Union[bytes, AudioSegment]) -> AudioSegment:
    if isinstance(audio_data, AudioSegment):
        if audio_data.max_dBFS == float("-inf"):
            raise ValueError("AudioSegment is completely silent!")
        return audio_data

    if not isinstance(audio_data, bytes):
        raise TypeError(f"Invalid audio data type: {type(audio_data)}")

    if len(audio_data) == 0:
        raise ValueError("Empty bytes data provided!")

    try:
        buffer = io.BytesIO(audio_data)
        try:
            audio = AudioSegment.from_wav(buffer)
        except Exception:
            buffer.seek(0)
            audio = AudioSegment.from_file(buffer)

        if len(audio) == 0:
            raise ValueError("Loaded audio has zero duration!")

        if audio.max_dBFS == float("-inf"):
            raise ValueError("Loaded audio is completely silent!")

        logger.info(f"‚úÖ Audio converted: {len(audio)/1000:.1f}s, peak: {audio.max_dBFS:.1f}dB")
        return audio
    except Exception as e:
        logger.error(f"Cannot convert audio data: {e}")
        raise


def safe_export_audio(audio: AudioSegment, path: Path, format_name: str = "wav") -> bool:
    if audio is None or len(audio) == 0 or audio.max_dBFS == float("-inf"):
        logger.error("‚ùå CRITICAL: Invalid audio supplied for export.")
        return False

    try:
        if not ensure_directory(path):
            return False

        parent_dir = path.parent
        if not os.access(parent_dir, os.W_OK):
            import tempfile

            temp_dir = Path(tempfile.gettempdir()) / "wavedream_export"
            temp_dir.mkdir(exist_ok=True)
            path = temp_dir / path.name
            logger.warning(f"‚ö†Ô∏è No write permission, fallback to: {path}")

        if path.exists():
            try:
                with open(path, "a"):
                    pass
            except PermissionError:
                ts = int(time.time() * 1000)
                path = path.parent / f"{path.stem}_{ts}{path.suffix}"
                logger.warning(f"‚ö†Ô∏è File locked, using: {path.name}")

        logger.info(
            f"üéµ Exporting audio: {len(audio)/1000:.1f}s, peak: {audio.max_dBFS:.1f}dB -> {path}"
        )

        try:
            audio.export(
                str(path),
                format=format_name,
                bitrate="320k" if format_name == "mp3" else None,
                parameters=["-avoid_negative_ts", "make_zero"] if format_name == "mp3" else None,
            )
        except Exception as export_error:
            logger.warning(f"‚ö†Ô∏è {format_name} export failed, trying WAV: {export_error}")
            buffer = io.BytesIO()
            audio.export(buffer, format="wav")
            buffer.seek(0)
            data = buffer.getvalue()
            if not data:
                raise ValueError("WAV export resulted in empty data!")
            path = path.with_suffix(".wav")
            with open(path, "wb") as f:
                f.write(data)

        if not path.exists():
            logger.error(f"‚ùå Export failed: {path} not created")
            return False
        size = path.stat().st_size
        if size < 1000:
            logger.error(f"‚ùå Export failed: {path} too small ({size} bytes)")
            return False

        logger.info(f"‚úÖ Exported successfully: {path} ({size} bytes)")
        return True

    except Exception as e:
        logger.error(f"‚ùå Critical export error for {path}: {e}")
        try:
            emergency_path = Path.cwd() / f"emergency_{path.name}"
            audio.export(str(emergency_path), format="wav")
            if emergency_path.exists() and emergency_path.stat().st_size > 1000:
                logger.warning(f"üö® Emergency save successful: {emergency_path}")
                return True
        except Exception as e2:
            logger.error(f"‚ùå Emergency save failed: {e2}")
        return False


# === –§–£–ù–ö–¶–ò–ò –í–ù–ï –ö–õ–ê–°–°–ê (–±—ã–ª–∏ –º–µ—Ç–æ–¥–∞–º–∏) ===
async def export_metadata(config: Dict, project_dir: Path) -> Dict[str, str]:
    """–≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    exported_files: Dict[str, str] = {}

    try:
        request_data = serialize_for_json(config.get("request_data", {}))
        structure = serialize_for_json(config.get("structure", {}))
        samples = serialize_for_json(config.get("samples", []))
        mastering = serialize_for_json(config.get("mastering", {}))

        project_info = {
            "wavedream_version": "2.0.0",
            "export_timestamp": time.time(),
            "generation_config": {
                "prompt": request_data.get("prompt", ""),
                "genre": request_data.get("genre", "unknown"),
                "mastering_purpose": request_data.get("mastering_purpose", "personal"),
                "bpm": request_data.get("bpm", 120),
                "duration": request_data.get("duration", 0),
                "energy_level": request_data.get("energy_level", 0.5),
                "creativity_factor": request_data.get("creativity_factor", 0.7),
            },
            "structure_info": {
                "total_duration": structure.get("total_duration", 0),
                "sections_count": len(structure.get("sections", [])),
                "source": structure.get("source", "unknown"),
            },
            "export_settings": {
                "export_stems": config.get("export_stems", True),
                "formats": config.get("export_formats", ["wav", "mp3"]),
            },
        }

        def safe_json_save(data: dict, file_path: Path, description: str) -> bool:
            try:
                temp_path = file_path.with_suffix(".tmp")
                with open(temp_path, "w", encoding="utf-8") as f:
                    json.dump(data, f, indent=2, ensure_ascii=False, default=str)
                if temp_path.exists() and temp_path.stat().st_size > 10:
                    temp_path.rename(file_path)
                    logger.info(f"  ‚úÖ {description}: {file_path}")
                    return True
                logger.error(f"  ‚ùå {description} failed: empty temp file")
                return False
            except Exception as e:
                logger.error(f"  ‚ùå {description} error: {e}")
                if "temp_path" in locals() and temp_path.exists():
                    temp_path.unlink()
                return False

        metadata_files = [
            (project_info, project_dir / "project_info.json", "Project info", "project_info"),
            (structure, project_dir / "track_structure.json", "Track structure", "structure"),
            (samples, project_dir / "used_samples.json", "Used samples", "samples"),
            (mastering, project_dir / "mastering_config.json", "Mastering config", "mastering"),
        ]

        for data, file_path, description, key in metadata_files:
            if data and safe_json_save(data, file_path, description):
                exported_files[key] = str(file_path)

        logger.info(f"  üìã Exported {len(exported_files)} metadata files")
    except Exception as e:
        logger.error(f"‚ùå Error exporting metadata: {e}")
        try:
            emergency_path = project_dir / "emergency_metadata.txt"
            with open(emergency_path, "w", encoding="utf-8") as f:
                f.write("WaveDream Export Emergency Metadata\n")
                f.write(f"Timestamp: {time.time()}\n")
                f.write(f"Config keys: {list(config.keys())}\n")
                f.write(f"Error: {str(e)}\n")
            exported_files["emergency"] = str(emergency_path)
            logger.warning(f"üö® Emergency metadata saved: {emergency_path}")
        except Exception as ee:
            logger.error(f"‚ùå Emergency metadata save failed: {e} / {ee}")

    return exported_files


async def create_project_report(
    config: Dict, exported_files: Dict[str, str], project_dir: Path
) -> Optional[str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        report_path = project_dir / "PROJECT_REPORT.md"
        request_data = config.get("request_data", {})
        structure = config.get("structure", {})

        with open(report_path, "w", encoding="utf-8") as f:
            f.write("# üéµ WaveDream Enhanced Pro - Project Report\n\n")
            f.write(f"**Generated**: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")

            f.write("## üìã Project Overview\n\n")
            f.write(f"**Prompt**: `{request_data.get('prompt', 'N/A')}`\n\n")
            f.write(f"**Genre**: {request_data.get('genre', 'Auto-detected')}\n\n")
            f.write(f"**BPM**: {request_data.get('bpm', 'Auto')}\n\n")
            f.write(f"**Duration**: {structure.get('total_duration', 0):.1f} seconds\n\n")
            f.write(f"**Mastering Purpose**: {request_data.get('mastering_purpose', 'personal')}\n\n")
            f.write(f"**Energy Level**: {request_data.get('energy_level', 0.5):.1f}\n\n")
            f.write(f"**Creativity Factor**: {request_data.get('creativity_factor', 0.7):.1f}\n\n")

            if "sections" in structure and structure["sections"]:
                f.write("## üèóÔ∏è Track Structure\n\n")
                f.write("| Section | Duration | Energy Level | Start Time |\n")
                f.write("|---------|----------|--------------|------------|\n")
                for section in structure["sections"]:
                    section_type = section.get("type", "unknown")
                    duration = section.get("duration", 0)
                    energy = section.get("energy", 0.5)
                    start_time = section.get("start_time", 0)
                    f.write(f"| {section_type.title()} | {duration}s | {energy:.1f} | {start_time}s |\n")
                f.write("\n")

            f.write("## üìÅ Exported Files\n\n")
            for file_type, file_path in exported_files.items():
                f.write(f"- **{file_type.replace('_', ' ').title()}**: `{Path(file_path).name}`\n")
            f.write("\n")

            f.write("## üîß Technical Details\n\n")
            f.write("**Pipeline Stages Completed**:\n")
            for i, line in enumerate(
                [
                    "Metadata Analysis & Genre Detection",
                    "Structure Generation (LLM/Fallback)",
                    "Semantic Sample Selection",
                    "MusicGen Base Generation",
                    "Stem Creation & Mixing",
                    "Effects Processing",
                    "Smart Mastering",
                    "Quality Verification",
                    "Multi-format Export",
                ],
                start=1,
            ):
                f.write(f"{i}. ‚úÖ {line}\n")
            f.write("\n")

            purpose = request_data.get("mastering_purpose", "personal")
            recommendations = {
                "freelance": [
                    "‚úÖ Ready for commercial sale",
                    "üì± Optimized for streaming platforms",
                    "üéß Test on various playback systems",
                ],
                "professional": [
                    "üé¨ Suitable for broadcast/cinema use",
                    "üì∫ Meets professional loudness standards",
                    "üéõÔ∏è Full dynamic range preserved",
                ],
                "personal": [
                    "üè† Perfect for personal listening",
                    "üéµ Natural, unprocessed character",
                    "üîä Great on home audio systems",
                ],
                "family": [
                    "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family-friendly mixing",
                    "üé• Ideal for home videos",
                    "üì± Works well on mobile devices",
                ],
            }
            for rec in recommendations.get(purpose, recommendations["personal"]):
                f.write(f"- {rec}\n")

            f.write("\n---\n*Generated by WaveDream Enhanced Pro v2.0*\n")

        logger.info(f"üìã Project report created: {report_path}")
        return str(report_path)
    except Exception as e:
        logger.error(f"‚ùå Error creating project report: {e}")
        return None


def validate_exports(exported_files: Dict[str, str]) -> None:
    logger.info("üîç Validating exported files...")
    total_files = len(exported_files)
    valid_files = 0
    for file_type, file_path in exported_files.items():
        path = Path(file_path)
        if path.exists():
            size = path.stat().st_size
            if size > 0:
                valid_files += 1
                logger.info(f"  ‚úÖ {file_type}: {path.name} ({size} bytes)")
            else:
                logger.error(f"  ‚ùå {file_type}: {path.name} (0 bytes - EMPTY)")
        else:
            logger.error(f"  ‚ùå {file_type}: {path.name} (MISSING)")
    logger.info(f"üìä Validation complete: {valid_files}/{total_files} files valid")


async def export_final_track(
    final_audio: AudioSegment, project_dir: Path, config: Dict, project_name: str
) -> Dict[str, str]:
    if final_audio is None or len(final_audio) == 0 or final_audio.max_dBFS == float("-inf"):
        raise ValueError("Invalid final_audio")

    exported_files: Dict[str, str] = {}
    request_data = config.get("request_data", {})
    prompt = request_data.get("prompt", "unknown")
    purpose = request_data.get("mastering_purpose", "personal")

    safe_prompt = "".join(c for c in prompt[:30] if c.isalnum() or c in " -_").strip()
    safe_prompt = "_".join(safe_prompt.split())

    base_name = f"{project_name}_{safe_prompt}_{purpose}_FINAL"

    main_path = project_dir / f"{base_name}.wav"
    if not safe_export_audio(final_audio, main_path, "wav"):
        raise ValueError(f"Failed to export main WAV: {main_path}")
    exported_files["final"] = str(main_path)

    additional_formats = config.get("export_formats", ["mp3"])
    for fmt in additional_formats:
        if fmt != "wav" and fmt in SUPPORTED_FORMATS:
            fmt_info = SUPPORTED_FORMATS[fmt]
            fmt_path = project_dir / f"{base_name}.{fmt_info['extension']}"
            if safe_export_audio(final_audio, fmt_path, fmt):
                exported_files[f"final_{fmt}"] = str(fmt_path)
            else:
                logger.warning(f"‚ö†Ô∏è Failed to export {fmt}: {fmt_path}")

    return exported_files


async def export_intermediate_versions(
    intermediate_audio: Dict[str, Any], project_dir: Path, config: Dict, project_name: str
) -> Dict[str, str]:
    exported_files: Dict[str, str] = {}

    stems_dir = project_dir / "stems"
    inter_dir = project_dir / "intermediate"
    ensure_directory(stems_dir)
    ensure_directory(inter_dir)

    stage_mapping = {
        "base": "01_MusicGen_Base",
        "mixed": "02_Mixed_Stems",
        "processed": "03_Effects_Applied",
    }

    for stage_key, stage_name in stage_mapping.items():
        if stage_key in intermediate_audio:
            try:
                audio_segment = bytes_to_audiosegment(intermediate_audio[stage_key])
                stage_path = inter_dir / f"{stage_name}.wav"
                if safe_export_audio(audio_segment, stage_path, "wav"):
                    exported_files[f"intermediate_{stage_key}"] = str(stage_path)
            except Exception as e:
                logger.error(f"‚ùå Error exporting intermediate {stage_key}: {e}")

    if "stems" in intermediate_audio and isinstance(intermediate_audio["stems"], dict):
        for instrument, stem_data in intermediate_audio["stems"].items():
            try:
                stem_audio = bytes_to_audiosegment(stem_data)
                stem_path = stems_dir / f"Stem_{instrument.title()}.wav"
                if safe_export_audio(stem_audio, stem_path, "wav"):
                    exported_files[f"stem_{instrument}"] = str(stem_path)
            except Exception as e:
                logger.error(f"‚ùå Error exporting stem {instrument}: {e}")

    return exported_files


# === –¢–û–ù–ö–ê–Ø –û–ë–Å–†–¢–ö–ê-–ö–õ–ê–°–° –î–õ–Ø pipeline.py ===
class ExportManager:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    
    –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
    - –£–ë–†–ê–ù–ê –∑–∞–≥–ª—É—à–∫–∞ —Å —Ç–∏—à–∏–Ω–æ–π –≤ _bytes_to_audiosegment
    - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
    - –°—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
    - –ò—Å–∫–ª—é—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–µ–∫
    """
    
    def __init__(self, base_dir: str = "output"):
        self.logger = logging.getLogger(__name__)
        self.base_dir = Path(base_dir)
        self.base_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.supported_formats = {
            "wav": {"extension": "wav", "quality": "lossless"},
            "mp3": {"extension": "mp3", "quality": "320k"},
            "flac": {"extension": "flac", "quality": "lossless"},
            "aac": {"extension": "m4a", "quality": "256k"}
        }

        self.logger.info(f"üìÅ ExportManager initialized: {self.base_dir}")

    def check_export_environment(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        checks = {}

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            test_file = self.base_dir / "write_test.tmp"
            with open(test_file, 'w') as f:
                f.write("test")
            if test_file.exists():
                test_file.unlink()
                checks["base_dir_writable"] = True
            else:
                checks["base_dir_writable"] = False
        except Exception:
            checks["base_dir_writable"] = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (–º–∏–Ω–∏–º—É–º 100MB)
        try:
            import shutil
            free_space = shutil.disk_usage(self.base_dir)[2]
            checks["sufficient_space"] = free_space > 100 * 1024 * 1024
        except Exception:
            checks["sufficient_space"] = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg –¥–ª—è MP3 —ç–∫—Å–ø–æ—Ä—Ç–∞
        try:
            import subprocess
            result = subprocess.run(['ffmpeg', '-version'],
                                    capture_output=True, text=True, timeout=5)
            checks["ffmpeg_available"] = result.returncode == 0
        except Exception:
            checks["ffmpeg_available"] = False

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ pydub - –ë–ï–ó –ó–ê–ì–õ–£–®–ï–ö!
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–≤—É–∫–æ–º (–Ω–µ —Ç–∏—à–∏–Ω–∞!)
            from pydub.generators import Sine
            test_audio = Sine(440).to_audio_segment(duration=1000)  # 1 —Å–µ–∫—É–Ω–¥–∞ 440Hz
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ –ù–ï —Ç–∏—à–∏–Ω–∞
            if test_audio.max_dBFS == float('-inf'):
                checks["pydub_working"] = False
                self.logger.error("‚ùå pydub test audio is silent!")
            else:
                # –ü—Ä–æ–±—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WAV
                buffer = io.BytesIO()
                test_audio.export(buffer, format="wav")
                buffer.seek(0)
                exported_size = len(buffer.getvalue())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞
                checks["pydub_working"] = exported_size > 1000  # WAV 1 —Å–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1KB
                
                if checks["pydub_working"]:
                    self.logger.info(f"‚úÖ pydub working correctly: exported {exported_size} bytes")
                else:
                    self.logger.error(f"‚ùå pydub export too small: {exported_size} bytes")
                
        except Exception as e:
            checks["pydub_working"] = False
            self.logger.error(f"‚ùå pydub test failed with exception: {e}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.logger.info("üîç Environment checks:")
        for check, result in checks.items():
            icon = "‚úÖ" if result else "‚ùå"
            self.logger.info(f"  {icon} {check}: {'OK' if result else 'FAILED'}")

        return checks

    def _serialize_for_json(self, obj: Any) -> Any:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if hasattr(obj, '__dataclass_fields__'):  # dataclass
            return asdict(obj)
        elif hasattr(obj, '__dict__'):  # –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
            return {k: self._serialize_for_json(v) for k, v in obj.__dict__.items()}
        elif isinstance(obj, (list, tuple)):
            return [self._serialize_for_json(item) for item in obj]
        elif isinstance(obj, dict):
            return {k: self._serialize_for_json(v) for k, v in obj.items()}
        elif isinstance(obj, (str, int, float, bool, type(None))):
            return obj
        else:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É
            return str(obj)
    
    def _bytes_to_audiosegment(self, audio_data: Union[bytes, AudioSegment], fallback_ms: int = 8000) -> AudioSegment:
        try:
            if isinstance(audio_data, AudioSegment):
                return audio_data
            if isinstance(audio_data, (bytes, bytearray)):
                if len(audio_data) == 0:
                    self.logger.warning("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ bytes -> —Ç–∏—à–∏–Ω–∞")
                    return AudioSegment.silent(duration=fallback_ms)
                buf = io.BytesIO(audio_data)
                # –ü—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ WAV, –∑–∞—Ç–µ–º –∫–∞–∫ ‚Äú–ª—é–±–æ–π‚Äù —Ñ–∞–π–ª
                try:
                    return AudioSegment.from_wav(buf)
                except Exception:
                    buf.seek(0)
                    return AudioSegment.from_file(buf)
            self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—É–¥–∏–æ: {type(audio_data)} -> —Ç–∏—à–∏–Ω–∞")
            return AudioSegment.silent(duration=fallback_ms)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return AudioSegment.silent(duration=fallback_ms)

    def _ensure_directory(self, path: Path) -> bool:
        try:
            path.parent.mkdir(parents=True, exist_ok=True)
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Failed to create directory {path.parent}: {e}")
            return False

    def _safe_export_audio(self, audio: AudioSegment, path: Path, format_name: str = "wav") -> bool:
        if audio is None:
            self.logger.error("‚ùå CRITICAL: Cannot export None audio!")
            return False
        if audio.max_dBFS == float('-inf'):
            self.logger.error("‚ùå CRITICAL: Cannot export silent audio!")
            return False
        if len(audio) == 0:
            self.logger.error("‚ùå CRITICAL: Cannot export zero-duration audio!")
            return False
        try:
            if not self._ensure_directory(path):
                return False
            if not os.access(path.parent, os.W_OK):
                self.logger.error(f"‚ùå No write permission to directory: {path.parent}")
                temp_dir = Path(tempfile.gettempdir()) / "wavedream_export"
                temp_dir.mkdir(exist_ok=True)
                path = temp_dir / path.name
                self.logger.warning(f"‚ö†Ô∏è Fallback to temp directory: {path}")
            if path.exists():
                try:
                    with open(path, 'a'):
                        pass
                except PermissionError:
                    timestamp = int(time.time() * 1000)
                    path = path.parent / f"{path.stem}_{timestamp}{path.suffix}"
                    self.logger.warning(f"‚ö†Ô∏è File locked, using: {path.name}")
            try:
                self.logger.info(f"üéµ Exporting audio: {len(audio)/1000:.1f}s, peak: {audio.max_dBFS:.1f}dB -> {path}")
                audio.export(str(path), format=format_name,
                             bitrate="320k" if format_name == "mp3" else None,
                             parameters=["-avoid_negative_ts", "make_zero"] if format_name == "mp3" else None)
            except Exception as export_error:
                self.logger.warning(f"‚ö†Ô∏è {format_name} export failed, trying WAV: {export_error}")
                buffer = io.BytesIO()
                audio.export(buffer, format="wav")
                buffer.seek(0)
                wav_data = buffer.getvalue()
                if len(wav_data) == 0:
                    raise ValueError("WAV export resulted in empty data!")
                wav_path = path.with_suffix('.wav')
                with open(wav_path, 'wb') as f:
                    f.write(wav_data)
                path = wav_path
            if not path.exists():
                self.logger.error(f"‚ùå Export failed: {path} was not created")
                return False
            if path.stat().st_size < 1000:
                self.logger.error(f"‚ùå Export failed: {path} is too small")
                return False
            self.logger.info(f"‚úÖ Exported successfully: {path} ({path.stat().st_size} bytes)")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Critical export error for {path}: {e}")
            try:
                emergency_path = Path.cwd() / f"emergency_{path.name}"
                if audio.max_dBFS == float('-inf'):
                    self.logger.error("‚ùå Emergency save cancelled - audio is silent!")
                    return False
                audio.export(str(emergency_path), format="wav")
                if emergency_path.exists() and emergency_path.stat().st_size > 1000:
                    self.logger.warning(f"üö® Emergency save successful: {emergency_path}")
                    return True
            except Exception as emergency_error:
                self.logger.error(f"‚ùå Even emergency save failed: {emergency_error}")
            return False

    async def export_complete_project(
        self,
        mastered_audio: Union[bytes, AudioSegment],
        intermediate_audio: Dict[str, Union[bytes, AudioSegment]],
        config: Dict
    ) -> Dict[str, str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∞—É–¥–∏–æ
        """
        self.logger.info("üíæ Starting complete project export...")
        
        try:
            # –î–û–ë–ê–í–õ–ï–ù–û: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if mastered_audio is None:
                raise ValueError("‚ùå CRITICAL: mastered_audio is None!")
            
            if isinstance(mastered_audio, bytes) and len(mastered_audio) == 0:
                raise ValueError("‚ùå CRITICAL: mastered_audio is empty bytes!")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            output_dir = Path(config.get("output_dir", self.base_dir))
            self._ensure_directory(output_dir)
            
            # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
            timestamp = int(time.time())
            project_name = f"WD_Project_{timestamp}"
            project_dir = output_dir / project_name
            self._ensure_directory(project_dir)
            
            self.logger.info(f"üìÅ Project directory: {project_dir}")
            
            exported_files = {}
            
            # 1. –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            self.logger.info("üéµ Exporting final track...")
            try:
                final_audio = self._bytes_to_audiosegment(mastered_audio)  # –ú–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                final_files = await self._export_final_track(final_audio, project_dir, config, project_name)
                exported_files.update(final_files)
            except Exception as e:
                self.logger.error(f"‚ùå CRITICAL: Final track export failed: {e}")
                raise ValueError(f"Cannot export final track - audio data is corrupted: {e}")
            
            # 2. –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –∏ —Å—Ç–µ–º–æ–≤
            if config.get("export_stems", True) and intermediate_audio:
                self.logger.info("üéõÔ∏è Exporting stems and intermediate versions...")
                try:
                    intermediate_files = await self._export_intermediate_versions(
                        intermediate_audio, project_dir, config, project_name
                    )
                    exported_files.update(intermediate_files)
                except Exception as e:
                    self.logger.error(f"‚ùå Intermediate export failed: {e}")
                    # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            
            # 3. –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            self.logger.info("üìã Exporting metadata...")
            try:
                metadata_files = await self._export_metadata(config, project_dir)
                exported_files.update(metadata_files)
            except Exception as e:
                self.logger.error(f"‚ùå Metadata export failed: {e}")
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
            self.logger.info("üìä Creating project report...")
            try:
                report_file = await self._create_project_report(config, exported_files, project_dir)
                if report_file:
                    exported_files["project_report"] = report_file
            except Exception as e:
                self.logger.error(f"‚ùå Report creation failed: {e}")
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            
            # 5. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            self._validate_exports(exported_files)
            
            # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
            if not any(key.startswith("final") for key in exported_files.keys()):
                raise ValueError("‚ùå CRITICAL: No final audio files were exported!")
            
            self.logger.info(f"üéâ Project export complete: {len(exported_files)} files in {project_dir}")
            
            return exported_files
            
        except Exception as e:
            self.logger.error(f"‚ùå CRITICAL Export error: {e}")
            
            # –ù–ï –í–û–ó–í–†–ê–©–ê–ï–ú –ü–£–°–¢–û–ô DICT - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ!
            raise ValueError(f"Project export failed: {e}")

    async def save_intermediate(self, name: str, audio_bytes: bytes, output_dir: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª"""
        path = Path(output_dir) / "intermediate" / f"{name}.wav"
        audio = AudioSegment.from_file(io.BytesIO(audio_bytes), format="wav")
        if self._safe_export_audio(audio, path):
            return str(path)
        return ""
    
    async def _export_final_track(
        self, final_audio: AudioSegment, project_dir: Path, config: Dict, project_name: str
    ) -> Dict[str, str]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —ç–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ
        if final_audio is None:
            raise ValueError("‚ùå CRITICAL: final_audio is None!")
        
        if final_audio.max_dBFS == float('-inf'):
            raise ValueError("‚ùå CRITICAL: final_audio is completely silent!")
        
        if len(final_audio) == 0:
            raise ValueError("‚ùå CRITICAL: final_audio has zero duration!")
        
        exported_files = {}
        
        # –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        request_data = config.get("request_data", {})
        prompt = request_data.get("prompt", "unknown")
        purpose = request_data.get("mastering_purpose", "personal")
        
        # –°–æ–∑–¥–∞—ë–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
        safe_prompt = "".join(c for c in prompt[:30] if c.isalnum() or c in " -_").strip()
        safe_prompt = "_".join(safe_prompt.split())
        
        base_name = f"{project_name}_{safe_prompt}_{purpose}_FINAL"
        
        # –û—Å–Ω–æ–≤–Ω–æ–π WAV —Ñ–∞–π–ª
        main_path = project_dir / f"{base_name}.wav"
        if self._safe_export_audio(final_audio, main_path, "wav"):
            exported_files["final"] = str(main_path)
        else:
            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ!
            raise ValueError(f"‚ùå CRITICAL: Failed to export main WAV file: {main_path}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        additional_formats = config.get("export_formats", ["mp3"])
        
        for fmt in additional_formats:
            if fmt != "wav" and fmt in self.supported_formats:
                fmt_info = self.supported_formats[fmt]
                fmt_path = project_dir / f"{base_name}.{fmt_info['extension']}"
                
                if self._safe_export_audio(final_audio, fmt_path, fmt):
                    exported_files[f"final_{fmt}"] = str(fmt_path)
                else:
                    self.logger.warning(f"‚ö†Ô∏è Failed to export {fmt} format: {fmt_path}")
        
        return exported_files
    
    async def save_intermediate(self, stage_key: str, audio_bytes: bytes, output_dir: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª –≤ output_dir/intermediate"""
        try:
            audio_segment = self._bytes_to_audiosegment(audio_bytes)
            stage_path = Path(output_dir) / "intermediate" / f"{stage_key}.wav"
            if self._safe_export_audio(audio_segment, stage_path, "wav"):
                return str(stage_path)
        except Exception as e:
            self.logger.error(f"‚ùå Error saving intermediate '{stage_key}': {e}")
        return ""

    async def save_stem(self, stem_name: str, audio_bytes: bytes, output_dir: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–µ–º –≤ output_dir/stems"""
        try:
            audio_segment = self._bytes_to_audiosegment(audio_bytes)
            stem_path = Path(output_dir) / "stems" / f"stem_{stem_name}.wav"
            if self._safe_export_audio(audio_segment, stem_path, "wav"):
                return str(stem_path)
        except Exception as e:
            self.logger.error(f"‚ùå Error saving stem '{stem_name}': {e}")
        return ""

    def save_final_mix(self, project_name: str, audio_bytes: bytes, output_dir: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∏–∫—Å"""
        try:
            audio_segment = self._bytes_to_audiosegment(audio_bytes)
            final_mix_path = Path(output_dir) / f"{project_name}_final_mix.wav"
            if self._safe_export_audio(audio_segment, final_mix_path, "wav"):
                return str(final_mix_path)
        except Exception as e:
            self.logger.error(f"‚ùå Error saving final mix: {e}")
        return ""

    async def save_final(self, project_name: str, audio_bytes: bytes, output_dir: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ –≤ output_dir"""
        try:
            audio_segment = self._bytes_to_audiosegment(audio_bytes)
            final_path = Path(output_dir) / f"{project_name}_final.wav"
            if self._safe_export_audio(audio_segment, final_path, "wav"):
                return str(final_path)
        except Exception as e:
            self.logger.error(f"‚ùå Error saving final track: {e}")
        return ""

    def force_save_everything(self, *args, **kwargs):
        """–ê–≤–∞—Ä–∏–π–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–∫–∏"""
        if len(args) >= 2:
            audio_dict = args[0]
            output_dir = args[1]
        else:
            self.logger.error("‚ùå force_save_everything: not enough arguments")
            return

        emergency_dir = Path(output_dir) / f"emergency_export_{int(time.time())}"
        emergency_dir.mkdir(parents=True, exist_ok=True)

        for name, audio_bytes in audio_dict.items():
            try:
                audio_segment = self._bytes_to_audiosegment(audio_bytes)
                self._safe_export_audio(audio_segment, emergency_dir / f"{name}.wav")
            except Exception as e:
                self.logger.error(f"‚ùå Error in emergency save for '{name}': {e}")
        
        return exported_files