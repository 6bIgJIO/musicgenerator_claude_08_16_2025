# export.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —ç–∫—Å–ø–æ—Ä—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è WaveDream Enhanced Pro v2.0
import os
import io
import json
import time
import logging
import shutil
from pathlib import Path
from typing import Dict, List, Optional, Union, Any
from pydub import AudioSegment
import soundfile as sf
import numpy as np
from datetime import datetime
import asyncio

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ WaveDream
try:
    from config import config, MasteringPurpose
except ImportError:
    # Fallback –µ—Å–ª–∏ config –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    class MockConfig:
        DEFAULT_OUTPUT_DIR = "wavedream_output"
        CACHE_DIR = "wavedream_cache"
        
        class MockPurpose:
            FREELANCE = "freelance"
            PROFESSIONAL = "professional"
            PERSONAL = "personal"
    
    config = MockConfig()
    MasteringPurpose = MockConfig.MockPurpose()


class ExportManager:
    """
    –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —ç–∫—Å–ø–æ—Ä—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä WaveDream Enhanced Pro v2.0
    
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í –≠–¢–û–ô –í–ï–†–°–ò–ò:
    - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å config.py –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π WaveDream
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ bytes, AudioSegment –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    - –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∞—É–¥–∏–æ
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
    - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å pipeline.py —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
    - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    """
    
    def __init__(self, base_output_dir: str = None):
        self.logger = logging.getLogger(__name__)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ WaveDream –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if hasattr(config, 'DEFAULT_OUTPUT_DIR'):
            self.base_output_dir = Path(base_output_dir or config.DEFAULT_OUTPUT_DIR)
        else:
            self.base_output_dir = Path(base_output_dir or "wavedream_output")
        
        self.supported_formats = ["wav", "mp3", "flac", "aac", "ogg"]
        
        # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self._create_base_structure()
        
        self.logger.info(f"‚úÖ ExportManager initialized: {self.base_output_dir}")
    
    def _create_base_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        try:
            directories = [
                self.base_output_dir,
                self.base_output_dir / "projects",
                self.base_output_dir / "stems", 
                self.base_output_dir / "intermediate",
                self.base_output_dir / "final_mixes",
                self.base_output_dir / "metadata",
                self.base_output_dir / "reports",
                self.base_output_dir / "emergency"
            ]
            
            for directory in directories:
                directory.mkdir(parents=True, exist_ok=True)
                self.logger.debug(f"Created directory: {directory}")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error creating base structure: {e}")
            raise
    
    def check_export_environment(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        checks = {}
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            test_file = self.base_output_dir / "test_write.tmp"
            try:
                test_file.write_text("test")
                test_file.unlink()
                checks["base_dir_writable"] = True
            except Exception:
                checks["base_dir_writable"] = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (–º–∏–Ω–∏–º—É–º 1GB)
            try:
                free_space = shutil.disk_usage(self.base_output_dir).free
                checks["sufficient_space"] = free_space > 1024 * 1024 * 1024
            except Exception:
                checks["sufficient_space"] = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ pydub
            try:
                test_audio = AudioSegment.silent(duration=100)
                buffer = io.BytesIO()
                test_audio.export(buffer, format="wav")
                checks["pydub_working"] = len(buffer.getvalue()) > 0
            except Exception:
                checks["pydub_working"] = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ soundfile
            try:
                test_data = np.array([0.1, 0.2, 0.1], dtype=np.float32)
                buffer = io.BytesIO()
                sf.write(buffer, test_data, 44100, format='wav')
                checks["soundfile_working"] = len(buffer.getvalue()) > 0
            except Exception:
                checks["soundfile_working"] = False
            
            self.logger.info(f"üîç Export environment check: {checks}")
            return checks
            
        except Exception as e:
            self.logger.error(f"‚ùå Environment check error: {e}")
            return {"error": False}
    
    def save_intermediate(self, stage_name: str, project_name: str, audio_data: Union[bytes, AudioSegment]) -> Optional[str]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —ç—Ç–∞–ø–µ pipeline
        
        Args:
            stage_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "01_base_generated")
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            audio_data: –ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ bytes –∏–ª–∏ AudioSegment
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if audio_data is None:
                self.logger.error(f"‚ùå Audio data is None for stage {stage_name}")
                return None
            
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            project_dir = self.base_output_dir / "intermediate" / project_name
            project_dir.mkdir(parents=True, exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%H%M%S")
            file_path = project_dir / f"{stage_name}_{timestamp}.wav"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            success = self._save_audio_data(audio_data, file_path)
            
            if success:
                self.logger.info(f"üíæ Intermediate saved: {stage_name} -> {file_path}")
                return str(file_path)
            else:
                self.logger.error(f"‚ùå Failed to save intermediate: {stage_name}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Error saving intermediate {stage_name}: {e}")
            return None
    
    def save_stem(self, audio_data: Union[bytes, AudioSegment], project_name: str, stem_name: str) -> Optional[str]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–µ–º–∞
        
        Args:
            audio_data: –ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–º–∞
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞  
            stem_name: –ò–º—è —Å—Ç–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "kick", "snare", "lead")
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Å—Ç–µ–º—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if audio_data is None:
                self.logger.error(f"‚ùå Stem audio data is None for {stem_name}")
                return None
            
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç–µ–º–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            stems_dir = self.base_output_dir / "stems" / project_name
            stems_dir.mkdir(parents=True, exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%H%M%S")
            file_path = stems_dir / f"{stem_name}_{timestamp}.wav"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            success = self._save_audio_data(audio_data, file_path)
            
            if success:
                self.logger.info(f"üéõÔ∏è Stem saved: {stem_name} -> {file_path}")
                return str(file_path)
            else:
                self.logger.error(f"‚ùå Failed to save stem: {stem_name}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Error saving stem {stem_name}: {e}")
            return None
    
    def save_final_mix(self, audio_data: Union[bytes, AudioSegment], project_name: str, format: str = "wav") -> Optional[str]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∏–∫—Å–∞
        
        Args:
            audio_data: –§–∏–Ω–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            format: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (wav, mp3, flac –∏ —Ç.–¥.)
            
        Returns:
            –ü—É—Ç—å –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if audio_data is None:
                self.logger.error(f"‚ùå Final mix audio data is None")
                return None
            
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∏–∫—Å–æ–≤
            final_dir = self.base_output_dir / "final_mixes"
            final_dir.mkdir(parents=True, exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            file_path = final_dir / f"{project_name}_FINAL_{timestamp}.{format}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            success = self._save_audio_data(audio_data, file_path, format)
            
            if success:
                self.logger.info(f"üéâ Final mix saved: {file_path}")
                return str(file_path)
            else:
                self.logger.error(f"‚ùå Final mix file save failed")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Error saving final mix: {e}")
            return None
    
    def _save_audio_data(self, audio_data: Union[bytes, AudioSegment], file_path: Path, format: str = "wav") -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
        
        Args:
            audio_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            format: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            if isinstance(audio_data, bytes):
                # –ï—Å–ª–∏ —ç—Ç–æ bytes - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
                if format == "wav" or format.lower() == "wav":
                    # –î–ª—è WAV –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                    with open(file_path, 'wb') as f:
                        f.write(audio_data)
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                    if file_path.exists() and file_path.stat().st_size > 1000:
                        return True
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Direct bytes save failed, trying AudioSegment conversion")
                
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                try:
                    temp_audio = AudioSegment.from_file(io.BytesIO(audio_data))
                    temp_audio.export(str(file_path), format=format)
                    
                    if file_path.exists() and file_path.stat().st_size > 1000:
                        return True
                        
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è AudioSegment conversion failed: {e}")
                    return False
                    
            elif isinstance(audio_data, AudioSegment):
                # –ï—Å–ª–∏ —ç—Ç–æ AudioSegment - –ø—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç
                audio_data.export(str(file_path), format=format)
                
                if file_path.exists() and file_path.stat().st_size > 1000:
                    return True
                    
            elif hasattr(audio_data, 'export'):
                # –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ export
                audio_data.export(str(file_path), format=format)
                
                if file_path.exists() and file_path.stat().st_size > 1000:
                    return True
                    
            elif hasattr(audio_data, 'getvalue'):
                # –ï—Å–ª–∏ —ç—Ç–æ BytesIO –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç
                with open(file_path, 'wb') as f:
                    f.write(audio_data.getvalue())
                    
                if file_path.exists() and file_path.stat().st_size > 1000:
                    return True
            
            else:
                self.logger.error(f"‚ùå Unsupported audio data type: {type(audio_data)}")
                return False
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            self.logger.error(f"‚ùå Audio save failed - file missing or too small: {file_path}")
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Audio save error for {file_path}: {e}")
            return False
    
    def save_metadata(self, project_name: str, metadata: Dict[str, Any]) -> Optional[str]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
        
        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            metadata: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata_dir = self.base_output_dir / "metadata"
            metadata_dir.mkdir(parents=True, exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            file_path = metadata_dir / f"{project_name}_metadata_{timestamp}.json"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
            enhanced_metadata = {
                "project_name": project_name,
                "export_timestamp": timestamp,
                "export_datetime": datetime.now().isoformat(),
                "wavedream_version": "Enhanced Pro v2.0",
                **metadata
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(enhanced_metadata, f, indent=2, ensure_ascii=False, default=str)
            
            self.logger.info(f"üìã Metadata saved: {file_path}")
            return str(file_path)
            
        except Exception as e:
            self.logger.error(f"‚ùå Error saving metadata: {e}")
            return None
    
    async def export_complete_project(
        self,
        mastered_audio: Union[bytes, AudioSegment],
        intermediate_audio: Dict[str, Union[bytes, AudioSegment]],
        config: Dict[str, Any]
    ) -> Dict[str, str]:
        """
        –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º —Å pipeline.py)
        
        Args:
            mastered_audio: –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫
            intermediate_audio: –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ pipeline
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –ø—É—Ç–µ–π –∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        exported_files = {}
        
        try:
            project_name = f"WD_Export_{int(time.time())}"
            output_dir = config.get("output_dir", str(self.base_output_dir / "projects" / project_name))
            
            # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
            project_path = Path(output_dir)
            project_path.mkdir(parents=True, exist_ok=True)
            
            # 1. –≠–ö–°–ü–û–†–¢ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–†–ï–ö–ê
            self.logger.info("  üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫...")
            export_formats = config.get("export_formats", ["wav"])
            
            for format in export_formats:
                if format in self.supported_formats:
                    final_path = project_path / f"{project_name}_FINAL.{format}"
                    
                    if self._save_audio_data(mastered_audio, final_path, format):
                        exported_files[f"final_{format}"] = str(final_path)
                        self.logger.info(f"    ‚úÖ Final {format.upper()}: {final_path.name}")
            
            # 2. –≠–ö–°–ü–û–†–¢ –°–¢–ï–ú–û–í
            if config.get("export_stems", False) and "stems" in intermediate_audio:
                self.logger.info("  üéõÔ∏è –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–µ–º—ã...")
                stems_dir = project_path / "stems"
                stems_dir.mkdir(exist_ok=True)
                
                stems = intermediate_audio["stems"]
                if isinstance(stems, dict):
                    for stem_name, stem_audio in stems.items():
                        stem_path = stems_dir / f"{stem_name}.wav"
                        
                        if self._save_audio_data(stem_audio, stem_path, "wav"):
                            exported_files[f"stem_{stem_name}"] = str(stem_path)
                            self.logger.info(f"    üé∏ Stem: {stem_name}")
            
            # 3. –≠–ö–°–ü–û–†–¢ –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–• –í–ï–†–°–ò–ô
            self.logger.info("  üìÇ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–µ—Ä—Å–∏–∏...")
            intermediate_dir = project_path / "intermediate"
            intermediate_dir.mkdir(exist_ok=True)
            
            for stage_name, stage_audio in intermediate_audio.items():
                if stage_name != "stems":  # –°—Ç–µ–º—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
                    stage_path = intermediate_dir / f"{stage_name}.wav"
                    
                    if self._save_audio_data(stage_audio, stage_path, "wav"):
                        exported_files[f"intermediate_{stage_name}"] = str(stage_path)
                        self.logger.info(f"    üìã Stage: {stage_name}")
            
            # 4. –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–ê –ü–†–û–ï–ö–¢–ê
            config_path = project_path / "project_config.json"
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False, default=str)
            exported_files["project_config"] = str(config_path)
            
            # 5. –°–û–ó–î–ê–ù–ò–ï README
            readme_path = project_path / "README.md" 
            self._create_project_readme(readme_path, project_name, config, exported_files)
            exported_files["readme"] = str(readme_path)
            
            # 6. –°–û–ó–î–ê–ù–ò–ï –î–ï–¢–ê–õ–¨–ù–û–ì–û –û–¢–ß–Å–¢–ê
            if config.get("structure") or config.get("samples") or config.get("mastering"):
                report_path = project_path / f"{project_name}_detailed_report.md"
                self._create_detailed_report(report_path, project_name, config, exported_files)
                exported_files["detailed_report"] = str(report_path)
            
            self.logger.info(f"üéâ Complete project export finished: {len(exported_files)} files")
            return exported_files
            
        except Exception as e:
            self.logger.error(f"‚ùå Complete project export error: {e}")
            
            # –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
            try:
                emergency_path = self.base_output_dir / "emergency" / f"emergency_final_{int(time.time())}.wav"
                emergency_path.parent.mkdir(parents=True, exist_ok=True)
                
                if self._save_audio_data(mastered_audio, emergency_path, "wav"):
                    return {"emergency_final": str(emergency_path)}
                else:
                    return {}
                
            except Exception as emergency_error:
                self.logger.error(f"‚ùå Emergency save failed: {emergency_error}")
                return {}
    
    def _create_project_readme(
        self, 
        readme_path: Path, 
        project_name: str,
        config: Dict[str, Any],
        exported_files: Dict[str, str]
    ):
        """–°–æ–∑–¥–∞–Ω–∏–µ README —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            request_data = config.get("request_data", {})
            
            readme_content = f"""# üéµ WaveDream Project: {project_name}

## üìã Project Information
- **Created**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
- **WaveDream Version**: Enhanced Pro v2.0
- **Project Type**: Full AI Generated Track

## üéØ Generation Parameters
- **Prompt**: `{request_data.get('prompt', 'N/A')}`
- **Genre**: {request_data.get('genre', 'Auto-detected')}
- **BPM**: {request_data.get('bpm', 'Auto')}
- **Duration**: {request_data.get('duration', 'Auto')} seconds
- **Mastering Purpose**: {request_data.get('mastering_purpose', 'personal')}
- **Energy Level**: {request_data.get('energy_level', 0.5)}

## üìÅ Exported Files
"""
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º
            file_groups = {
                "Final Tracks": [],
                "Stems": [],
                "Intermediate Versions": [],
                "Project Files": []
            }
            
            for file_type, file_path in exported_files.items():
                file_name = Path(file_path).name
                
                if "final" in file_type:
                    file_groups["Final Tracks"].append(f"- **{file_type.replace('final_', '').upper()}**: `{file_name}`")
                elif "stem" in file_type:
                    file_groups["Stems"].append(f"- **{file_type.replace('stem_', '').title()}**: `{file_name}`")
                elif "intermediate" in file_type:
                    file_groups["Intermediate Versions"].append(f"- **{file_type.replace('intermediate_', '').title()}**: `{file_name}`")
                else:
                    file_groups["Project Files"].append(f"- **{file_type.replace('_', ' ').title()}**: `{file_name}`")
            
            for group_name, files in file_groups.items():
                if files:
                    readme_content += f"\n### {group_name}\n"
                    for file_line in files:
                        readme_content += f"{file_line}\n"
            
            readme_content += f"""
## üéõÔ∏è WaveDream Pipeline Stages
1. ‚úÖ Metadata Analysis & Genre Detection
2. ‚úÖ Structure Generation (LLaMA3/Fallback)
3. ‚úÖ Semantic Sample Selection
4. ‚úÖ MusicGen Base Generation
5. ‚úÖ Stem Creation & Layering
6. ‚úÖ Smart Mixing
7. ‚úÖ Effects Processing
8. ‚úÖ Purpose-Driven Mastering
9. ‚úÖ Quality Verification
10. ‚úÖ Multi-Format Export

## üîß Usage Notes
- All intermediate versions preserved for analysis and remixing
- Stems available for further processing and remixing
- Mastering optimized for **{request_data.get('mastering_purpose', 'personal')}** use
- Full metadata and configuration preserved in project files

---
*Generated by WaveDream Enhanced Pro v2.0 - Full AI Music Generation Suite*
"""
            
            with open(readme_path, 'w', encoding='utf-8') as f:
                f.write(readme_content)
                
        except Exception as e:
            self.logger.error(f"‚ùå Error creating README: {e}")
    
    def _create_detailed_report(
        self, 
        report_path: Path, 
        project_name: str, 
        config: Dict[str, Any], 
        exported_files: Dict[str, str]
    ):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            request_data = config.get("request_data", {})
            structure = config.get("structure", {})
            samples = config.get("samples", [])
            mastering = config.get("mastering", {})
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(f"""# üéµ WaveDream Enhanced Pro - Detailed Project Report

## üìã Project: {project_name}
Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## üéØ Generation Request
- **Original Prompt**: `{request_data.get('prompt', 'N/A')}`
- **Target Genre**: {request_data.get('genre', 'Auto-detected')}
- **Target BPM**: {request_data.get('bpm', 'Auto-detected')}
- **Target Duration**: {request_data.get('duration', 'Auto-generated')} seconds
- **Mastering Purpose**: {request_data.get('mastering_purpose', 'personal')}
- **Energy Level**: {request_data.get('energy_level', 0.5)}
- **Creativity Factor**: {request_data.get('creativity_factor', 0.7)}

""")
                
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–∫–∞
                if structure and isinstance(structure, dict) and structure.get("sections"):
                    f.write(f"## üèóÔ∏è Track Structure ({len(structure['sections'])} sections)\n\n")
                    f.write("| ‚Ññ | Type | Duration | Energy | Start Time |\n")
                    f.write("|---|------|----------|--------|-----------|\n")
                    
                    for i, section in enumerate(structure['sections'], 1):
                        f.write(f"| {i} | **{section.get('type', 'unknown').title()}** | "
                               f"{section.get('duration', 0)}s | {section.get('energy', 0):.1f} | "
                               f"{section.get('start_time', 0)}s |\n")
                    
                    f.write(f"\n**Total Duration**: {structure.get('total_duration', 0)} seconds\n")
                    f.write(f"**Structure Source**: {structure.get('source', 'unknown')}\n\n")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—ç–º–ø–ª—ã
                if samples:
                    self._write_samples_section(f, samples)
                
                # –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                if mastering:
                    self._write_mastering_section(f, mastering)
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                self._write_exported_files_section(f, exported_files)
                
                f.write("""
## üéõÔ∏è Technical Pipeline Details
**WaveDream Enhanced Pro v2.0** uses a sophisticated multi-stage pipeline:

1. **Semantic Analysis**: Advanced NLP analysis of user prompts
2. **Genre Detection**: ML-based genre classification with keyword weighting
3. **Structure Generation**: LLaMA3-powered structural analysis with intelligent fallbacks
4. **Sample Selection**: Semantic similarity matching with MFCC/spectral analysis
5. **Base Generation**: MusicGen neural audio generation with genre conditioning
6. **Stem Processing**: Multi-layered stem creation with instrument-specific processing
7. **Smart Mixing**: Genre-aware mixing with automatic level balancing
8. **Effects Processing**: Dynamic effects chains adapted to genre and purpose
9. **Adaptive Mastering**: Purpose-driven mastering (freelance/professional/personal/etc.)
10. **Quality Verification**: Automated quality analysis and correction
11. **Multi-Format Export**: Comprehensive export with metadata preservation

## üí° Recommendations
Based on your mastering purpose (**{request_data.get('mastering_purpose', 'personal')}**):

""")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é
                purpose = request_data.get('mastering_purpose', 'personal')
                recommendations = {
                    "freelance": [
                        "‚úÖ Optimized for commercial streaming platforms",
                        "üì± Ready for Spotify, Apple Music, YouTube",
                        "üéß Test on multiple playback systems",
                        "üí∞ Suitable for client delivery and sales"
                    ],
                    "professional": [
                        "üé¨ Broadcast and cinema-ready",
                        "üì∫ Full dynamic range preserved",
                        "üéõÔ∏è Professional loudness standards",
                        "üèÜ Suitable for high-end productions"
                    ],
                    "personal": [
                        "üè† Perfect for personal listening",
                        "üéµ Natural, unprocessed character",
                        "üîä Great on home audio systems",
                        "‚ù§Ô∏è Optimized for enjoyment over loudness"
                    ],
                    "family": [
                        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family-friendly mastering approach",
                        "üé• Ideal for home videos and memories",
                        "üì± Mobile device optimized",
                        "üòä Warm and engaging sound"
                    ],
                    "streaming": [
                        "üì∫ Platform loudness normalization ready",
                        "üéµ Optimized for Spotify, YouTube, etc.",
                        "üîä Consistent across all streaming services",
                        "üìä LUFS compliance guaranteed"
                    ],
                    "vinyl": [
                        "üíø Vinyl pressing optimized",
                        "üî• Warm analog character",
                        "üéõÔ∏è Wide dynamic range preserved",
                        "‚ú® Perfect for physical media"
                    ]
                }
                
                purpose_recs = recommendations.get(purpose, recommendations["personal"])
                for rec in purpose_recs:
                    f.write(f"{rec}\n")
                
                f.write(f"""

## üìä System Information
- **WaveDream Version**: Enhanced Pro v2.0
- **Export Time**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **Total Files Created**: {len(exported_files)}
- **Project Size**: {self._calculate_project_size_from_files(exported_files)}

---
*This report was automatically generated by WaveDream Enhanced Pro v2.0*
""")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error creating detailed report: {e}")
    
    def _write_samples_section(self, f, samples: List[Dict]):
        """–ó–∞–ø–∏—Å—å —Å–µ–∫—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—ç–º–ø–ª–∞—Ö –≤ –æ—Ç—á—ë—Ç"""
        f.write(f"## üéõÔ∏è Used Samples ({len(samples)})\n\n")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        by_instrument = {}
        for sample in samples:
            instrument = sample.get("instrument_role", "unknown")
            if instrument not in by_instrument:
                by_instrument[instrument] = []
            by_instrument[instrument].append(sample)
        
        for instrument, instrument_samples in by_instrument.items():
            f.write(f"### {instrument.title()} ({len(instrument_samples)} samples)\n")
            f.write("| Filename | Section | Tags | Tempo |\n")
            f.write("|----------|---------|------|-------|\n")
            
            for sample in instrument_samples:
                filename = sample.get("filename", "unknown")
                section = sample.get("section", "unknown")
                tags = ", ".join(sample.get("tags", []))[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                tempo = sample.get("tempo", "N/A")
                
                f.write(f"| `{filename}` | {section} | {tags} | {tempo} |\n")
            
            f.write("\n")
    
    def _write_mastering_section(self, f, mastering: Dict):
        """–ó–∞–ø–∏—Å—å —Å–µ–∫—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–µ –≤ –æ—Ç—á—ë—Ç"""
        f.write("## üéöÔ∏è Mastering Configuration\n\n")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        f.write("### Target Parameters\n")
        f.write(f"- **Target LUFS**: {mastering.get('target_lufs', 'N/A')}\n")
        f.write(f"- **Peak Ceiling**: {mastering.get('peak_ceiling', 'N/A')} dB\n")
        f.write(f"- **Character**: {mastering.get('character', 'N/A')}\n")
        f.write(f"- **Mastering Style**: {mastering.get('mastering_style', 'N/A')}\n\n")
        
        # –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if "applied_stages" in mastering:
            f.write("### Applied Processing Chain\n")
            for i, stage in enumerate(mastering["applied_stages"], 1):
                f.write(f"{i}. **{stage.replace('_', ' ').title()}**\n")
            f.write("\n")
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        if "source_characteristics" in mastering:
            source = mastering["source_characteristics"]
            f.write("### Source Material Analysis\n")
            f.write(f"- **Original LUFS**: {source.get('lufs', 'N/A')}\n")
            f.write(f"- **Original Peak**: {source.get('peak', 'N/A')} dB\n")
            f.write(f"- **Dynamic Range**: {source.get('dynamic_range', 'N/A')} LU\n")
            f.write(f"- **Stereo Width**: {source.get('stereo_width', 'N/A')}\n")
            f.write(f"- **Duration**: {source.get('duration', 'N/A')} seconds\n\n")
    
    def _write_exported_files_section(self, f, exported_files: Dict[str, str]):
        """–ó–∞–ø–∏—Å—å —Å–µ–∫—Ü–∏–∏ –æ–± —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –≤ –æ—Ç—á—ë—Ç"""
        f.write("## üìÅ Exported Files\n\n")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º
        file_groups = {
            "Final Tracks": [],
            "Intermediate Versions": [],
            "Stems": [],
            "Project Metadata": []
        }
        
        for file_type, file_path in exported_files.items():
            relative_path = Path(file_path).name
            file_size = self._get_file_size_str(file_path)
            
            if "final" in file_type:
                file_groups["Final Tracks"].append(f"- **{file_type.replace('final_', '').upper()}**: `{relative_path}` ({file_size})")
            elif "stem" in file_type:
                file_groups["Stems"].append(f"- **{file_type.replace('stem_', '').title()}**: `{relative_path}` ({file_size})")
            elif "intermediate" in file_type:
                file_groups["Intermediate Versions"].append(f"- **{file_type.replace('intermediate_', '').title()}**: `{relative_path}` ({file_size})")
            else:
                file_groups["Project Metadata"].append(f"- **{file_type.replace('_', ' ').title()}**: `{relative_path}` ({file_size})")
        
        for group_name, files in file_groups.items():
            if files:
                f.write(f"### {group_name}\n")
                for file_line in files:
                    f.write(f"{file_line}\n")
                f.write("\n")
    
    def _get_file_size_str(self, file_path: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            if os.path.exists(file_path):
                size = os.path.getsize(file_path)
                if size > 1024 * 1024:  # MB
                    return f"{size / (1024 * 1024):.1f} MB"
                elif size > 1024:  # KB
                    return f"{size / 1024:.1f} KB"
                else:
                    return f"{size} bytes"
            return "unknown"
        except:
            return "unknown"
    
    def _calculate_project_size_from_files(self, exported_files: Dict[str, str]) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            total_size = 0
            file_count = 0
            
            for file_path in exported_files.values():
                if file_path and isinstance(file_path, str) and os.path.exists(file_path):
                    total_size += os.path.getsize(file_path)
                    file_count += 1
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if total_size > 1024 * 1024 * 1024:  # > 1GB
                size_str = f"{total_size / (1024 * 1024 * 1024):.1f} GB"
            elif total_size > 1024 * 1024:  # > 1MB
                size_str = f"{total_size / (1024 * 1024):.1f} MB"
            elif total_size > 1024:  # > 1KB
                size_str = f"{total_size / 1024:.1f} KB"
            else:
                size_str = f"{total_size} bytes"
            
            return f"{size_str} ({file_count} files)"
            
        except Exception as e:
            self.logger.error(f"Error calculating project size: {e}")
            return "unknown"
    
    def force_save_everything(
        self,
        mastered_audio: Union[bytes, AudioSegment],
        intermediate_storage: Dict[str, Any],
        metadata: Dict[str, Any]
    ) -> List[str]:
        """
        –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        
        Args:
            mastered_audio: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫
            intermediate_storage: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        saved_files = []
        
        try:
            # –°–æ–∑–¥–∞—ë–º –∞–≤–∞—Ä–∏–π–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            emergency_dir = self.base_output_dir / "emergency" / f"crash_save_{int(time.time())}"
            emergency_dir.mkdir(parents=True, exist_ok=True)
            
            self.logger.info(f"üö® Starting emergency save to: {emergency_dir}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫
            if mastered_audio is not None:
                try:
                    final_path = emergency_dir / "emergency_final.wav"
                    if self._save_audio_data(mastered_audio, final_path, "wav"):
                        saved_files.append(str(final_path))
                        self.logger.info(f"üö® Emergency final saved: {final_path}")
                except Exception as e:
                    self.logger.error(f"‚ùå Emergency final save failed: {e}")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
            if intermediate_storage:
                for stage, data in intermediate_storage.items():
                    try:
                        if isinstance(data, str) and os.path.exists(data):
                            # –≠—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É - –∫–æ–ø–∏—Ä—É–µ–º
                            emergency_file = emergency_dir / f"emergency_{stage}_{Path(data).name}"
                            shutil.copy2(data, emergency_file)
                            saved_files.append(str(emergency_file))
                            self.logger.info(f"üö® Emergency copy: {stage} -> {emergency_file}")
                            
                        elif isinstance(data, dict):
                            # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å—Ç–µ–º–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                            for sub_name, sub_data in data.items():
                                if isinstance(sub_data, str) and os.path.exists(sub_data):
                                    emergency_file = emergency_dir / f"emergency_{stage}_{sub_name}_{Path(sub_data).name}"
                                    shutil.copy2(sub_data, emergency_file)
                                    saved_files.append(str(emergency_file))
                                    
                                elif sub_data is not None:  # –ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
                                    emergency_file = emergency_dir / f"emergency_{stage}_{sub_name}.wav"
                                    if self._save_audio_data(sub_data, emergency_file, "wav"):
                                        saved_files.append(str(emergency_file))
                                        
                        elif data is not None:  # –ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
                            emergency_file = emergency_dir / f"emergency_{stage}.wav"
                            if self._save_audio_data(data, emergency_file, "wav"):
                                saved_files.append(str(emergency_file))
                                
                    except Exception as e:
                        self.logger.error(f"‚ùå Emergency save failed for {stage}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if metadata:
                try:
                    metadata_path = emergency_dir / "emergency_metadata.json"
                    with open(metadata_path, 'w', encoding='utf-8') as f:
                        json.dump({
                            "emergency_save": True,
                            "timestamp": time.time(),
                            "datetime": datetime.now().isoformat(),
                            "original_metadata": metadata,
                            "saved_files": saved_files
                        }, f, indent=2, ensure_ascii=False, default=str)
                    
                    saved_files.append(str(metadata_path))
                    self.logger.info(f"üö® Emergency metadata saved: {metadata_path}")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå Emergency metadata save failed: {e}")
            
            self.logger.info(f"üö® Emergency save completed: {len(saved_files)} files")
            return saved_files
            
        except Exception as e:
            self.logger.error(f"‚ùå Critical emergency save error: {e}")
            return []
    
    def test_export_system(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        
        Returns:
            True –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.logger.info("üß™ Testing export system...")
            
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ
            test_audio = AudioSegment.silent(duration=1000)  # 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã
            
            # –¢–µ—Å—Ç 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            intermediate_path = self.save_intermediate("test_stage", "test_project", test_audio)
            if not intermediate_path:
                raise Exception("Intermediate save failed")
            
            # –¢–µ—Å—Ç 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–µ–º–∞
            stem_path = self.save_stem(test_audio, "test_project", "test_stem")
            if not stem_path:
                raise Exception("Stem save failed")
            
            # –¢–µ—Å—Ç 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∏–∫—Å–∞  
            final_path = self.save_final_mix(test_audio, "test_project")
            if not final_path:
                raise Exception("Final mix save failed")
            
            # –¢–µ—Å—Ç 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            test_metadata = {"test": True, "timestamp": time.time()}
            metadata_path = self.save_metadata("test_project", test_metadata)
            if not metadata_path:
                raise Exception("Metadata save failed")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            for test_file_path in [intermediate_path, stem_path, final_path, metadata_path]:
                try:
                    if test_file_path and os.path.exists(test_file_path):
                        os.unlink(test_file_path)
                except Exception:
                    pass
            
            self.logger.info("‚úÖ Export system test passed")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Export system test failed: {e}")
            return False
    
    def debug_export_issue(
        self,
        mastered_audio: Union[bytes, AudioSegment],
        intermediate_audio: Dict[str, Union[bytes, AudioSegment]],
        config: Dict[str, Any]
    ):
        """
        –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        try:
            self.logger.info("üîç DEBUG: Export issue analysis")
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ
            self.logger.info(f"üîç Final audio type: {type(mastered_audio)}")
            if isinstance(mastered_audio, bytes):
                self.logger.info(f"üîç Final audio size: {len(mastered_audio)} bytes")
            elif hasattr(mastered_audio, '__len__'):
                self.logger.info(f"üîç Final audio length: {len(mastered_audio)}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
            self.logger.info(f"üîç Intermediate audio keys: {list(intermediate_audio.keys())}")
            for key, audio in intermediate_audio.items():
                self.logger.info(f"üîç {key}: type={type(audio)}")
                if isinstance(audio, bytes):
                    self.logger.info(f"üîç   size: {len(audio)} bytes")
                elif isinstance(audio, dict):
                    self.logger.info(f"üîç   dict keys: {list(audio.keys())}")
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.logger.info(f"üîç Config keys: {list(config.keys())}")
            self.logger.info(f"üîç Output dir: {config.get('output_dir', 'N/A')}")
            self.logger.info(f"üîç Export formats: {config.get('export_formats', 'N/A')}")
            self.logger.info(f"üîç Export stems: {config.get('export_stems', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env_status = self.check_export_environment()
            self.logger.info(f"üîç Environment status: {env_status}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Debug analysis error: {e}")
    
    def get_export_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        try:
            stats = {
                "base_directory": str(self.base_output_dir),
                "supported_formats": self.supported_formats,
                "directories": {}
            }
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            for subdir in ["projects", "stems", "intermediate", "final_mixes", "metadata", "emergency"]:
                dir_path = self.base_output_dir / subdir
                if dir_path.exists():
                    files = list(dir_path.rglob("*"))
                    file_count = len([f for f in files if f.is_file()])
                    total_size = sum(f.stat().st_size for f in files if f.is_file())
                    
                    stats["directories"][subdir] = {
                        "exists": True,
                        "file_count": file_count,
                        "total_size_mb": round(total_size / (1024 * 1024), 2)
                    }
                else:
                    stats["directories"][subdir] = {"exists": False}
            
            return stats
            
        except Exception as e:
            self.logger.error(f"‚ùå Error getting export statistics: {e}")
            return {"error": str(e)}


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def quick_export_track(audio_data: Union[bytes, AudioSegment], filename: str = None) -> Optional[str]:
    """
    –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–∫–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    try:
        export_manager = ExportManager()
        
        if not filename:
            filename = f"quick_export_{int(time.time())}"
        
        final_path = export_manager.save_final_mix(audio_data, filename)
        return final_path
        
    except Exception as e:
        logging.error(f"‚ùå Quick export error: {e}")
        return None


def export_with_stems(
    final_audio: Union[bytes, AudioSegment],
    stems: Dict[str, Union[bytes, AudioSegment]],
    project_name: str = None
) -> Dict[str, str]:
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–∫–∞ —Å–æ —Å—Ç–µ–º–∞–º–∏
    """
    try:
        export_manager = ExportManager()
        
        if not project_name:
            project_name = f"stems_export_{int(time.time())}"
        
        exported = {}
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫
        final_path = export_manager.save_final_mix(final_audio, project_name)
        if final_path:
            exported["final"] = final_path
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–µ–º—ã
        for stem_name, stem_audio in stems.items():
            stem_path = export_manager.save_stem(stem_audio, project_name, stem_name)
            if stem_path:
                exported[f"stem_{stem_name}"] = stem_path
        
        return exported
        
    except Exception as e:
        logging.error(f"‚ùå Stems export error: {e}")
        return {}


def test_export_system() -> bool:
    """
    –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    try:
        export_manager = ExportManager()
        return export_manager.test_export_system()
    except Exception as e:
        logging.error(f"‚ùå Export system test error: {e}")
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
default_export_manager = ExportManager()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    
    print("üß™ Testing WaveDream Export Manager...")
    
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
    if test_export_system():
        print("‚úÖ Export system test passed")
    else:
        print("‚ùå Export system test failed")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = default_export_manager.get_export_statistics()
    print(f"üìä Export statistics: {stats}")
    
    # –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
    test_audio = AudioSegment.silent(duration=2000)  # 2 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã
    quick_path = quick_export_track(test_audio, "export_test")
    
    if quick_path and os.path.exists(quick_path):
        print(f"‚úÖ Quick export test passed: {quick_path}")
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(quick_path)
        except:
            pass
    else:
        print("‚ùå Quick export test failed")
    
    print("üéâ Export Manager testing completed")
