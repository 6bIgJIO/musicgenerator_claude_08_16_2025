import os
from pydub import AudioSegment
import logging

def overlay_timeline(base_wav_path, timeline, output_path="out/final_mix.wav"):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∏–∫—Å –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞ –∏ —Å–ø–∏—Å–∫–∞ –≤—Å—Ç–∞–≤–æ–∫ (timeline).
    """
    if not os.path.exists(base_wav_path):
        raise FileNotFoundError(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π WAV –Ω–µ –Ω–∞–π–¥–µ–Ω: {base_wav_path}")

    base = AudioSegment.from_file(base_wav_path).set_channels(2).set_sample_width(2)
    logging.info(f"[üéº] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –æ—Å–Ω–æ–≤–∞: {len(base)/1000:.1f} —Å–µ–∫")

    for i, item in enumerate(timeline):
        seg = item["segment"]
        pos = item["start_ms"]

        try:
            logging.info(f"  ‚îî‚îÄ [+] –í—Å—Ç–∞–≤–∫–∞ #{i+1} @ {pos} –º—Å | —Ç—Ä–µ–∫: {item['track']} | —Ç–µ–≥–∏: {item['tags']}")
            base = base.overlay(seg, position=pos)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç #{i+1} ‚Üí {e}")

    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    base.export(output_path, format="wav")
    logging.info(f"[‚úÖ] –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∏–∫—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
    return output_path