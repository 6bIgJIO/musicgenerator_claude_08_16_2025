#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ 'final_path' is not defined –≤ pipeline.py
"""

import shutil

def fix_final_path_error():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É final_path –≤ exception handler"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ final_path –≤ pipeline.py...")
    
    try:
        with open('pipeline.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        print("‚úÖ –§–∞–π–ª pipeline.py –ø—Ä–æ—á–∏—Ç–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    try:
        shutil.copy('pipeline.py', 'pipeline.py.backup2')
        print("üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: pipeline.py.backup2")
    except:
        pass
    
    # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥ –≤ exception handler
    problem_patterns = [
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –≤ –±–ª–æ–∫–µ try/except
        '''            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—ë —á—Ç–æ –µ—Å—Ç—å
            try:
                if hasattr(self, '_intermediate_storage') and self._intermediate_storage:
                    self.logger.info("üö® –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
                    emergency_files = self.export_manager.force_save_everything(
                        mastered_audio if 'mastered_audio' in locals() else b'',
                        self._intermediate_storage,
                        {"error": str(e), "timestamp": time.time()}
                    )
                    self.logger.info(f"üö® –ê–≤–∞—Ä–∏–π–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(emergency_files)} —Ñ–∞–π–ª–æ–≤")
            except Exception as save_error:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_error}")
            
            return GenerationResult(
                success=False,
                generation_time=generation_time,
                error_message=str(e),
                intermediate_files=self._intermediate_storage
            )''',
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ final_path
        'final_path=final_path or exported_files.get("final")',
        
        # –í–∞—Ä–∏–∞–Ω—Ç 3: –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏
        '''return GenerationResult(
                success=True,
                final_path=final_path or exported_files.get("final"),'''
    ]
    
    fixed = False
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –ó–∞–º–µ–Ω–∞ –≤ exception handler
    if 'mastered_audio if \'mastered_audio\' in locals() else b\'\'' in content:
        content = content.replace(
            'mastered_audio if \'mastered_audio\' in locals() else b\'\'',
            'mastered_audio if \'mastered_audio\' in locals() else None'
        )
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ mastered_audio")
        fixed = True
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –ó–∞–º–µ–Ω–∞ final_path –≤ GenerationResult
    if 'final_path=final_path or exported_files.get("final")' in content:
        content = content.replace(
            'final_path=final_path or exported_files.get("final")',
            'final_path=exported_files.get("final")'
        )
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ final_path")
        fixed = True
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –ü–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ final_path
    lines = content.split('\n')
    new_lines = []
    
    for i, line in enumerate(lines):
        if 'final_path' in line and 'final_path =' not in line and 'def ' not in line:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π final_path, –∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            if 'GenerationResult' in line and 'final_path=' in line:
                # –í –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ GenerationResult
                if 'final_path or exported_files' in line:
                    line = line.replace('final_path or exported_files.get("final")', 'exported_files.get("final")')
                    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {i+1}: GenerationResult final_path")
                    fixed = True
                elif 'final_path,' in line or 'final_path)' in line:
                    # –ü—Ä–æ—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ final_path –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                    line = line.replace('final_path', 'exported_files.get("final", None)')
                    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {i+1}: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π final_path")
                    fixed = True
        
        new_lines.append(line)
    
    if fixed:
        content = '\n'.join(new_lines)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é final_path –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not fixed:
        print("‚ö†Ô∏è –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
        
        # –ò—â–µ–º –º–µ—Å—Ç–æ –≥–¥–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è final_path
        if '# === 11. EXPORT + –ú–ï–¢–ê–î–ê–ù–ù–´–ï ===' in content:
            insert_point = content.find('# === 11. EXPORT + –ú–ï–¢–ê–î–ê–ù–ù–´–ï ===')
            before = content[:insert_point]
            after = content[insert_point:]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é final_path
            init_code = '''            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è final_path
            final_path = None
            
'''
            content = before + init_code + after
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è final_path")
            fixed = True
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if fixed:
        try:
            with open('pipeline.py', 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π pipeline.py —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    else:
        print("‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É–∂–µ –∏—Å–ø—Ä–∞–≤–µ–Ω")
        return True

def create_emergency_pipeline_fix():
    """–°–æ–∑–¥–∞—ë—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–∞—Ç—á –¥–ª—è pipeline"""
    
    print("\nüö® –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞—Ç—á–∞...")
    
    patch_code = '''# –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–∞—Ç—á –¥–ª—è pipeline.py
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –Ω–∞—á–∞–ª–µ main.py: import emergency_pipeline_fix

def patch_pipeline_final_path():
    """–ü–∞—Ç—á–∏—Ç –ø—Ä–æ–±–ª–µ–º—É —Å final_path –≤ pipeline"""
    try:
        from pipeline import WaveDreamPipeline
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        original_generate = WaveDreamPipeline.generate_track
        
        async def patched_generate_track(self, request):
            """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π generate_track —Å proper final_path handling"""
            try:
                # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                result = await original_generate(self, request)
                return result
                
            except NameError as e:
                if "final_path" in str(e):
                    print("üîß –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ final_path, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–∫—Å...")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    from pipeline import GenerationResult
                    import time
                    
                    return GenerationResult(
                        success=False,
                        final_path=None,
                        generation_time=0.0,
                        error_message="–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ final_path - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
                    )
                else:
                    raise
            
            except Exception as e:
                print(f"üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ pipeline: {e}")
                from pipeline import GenerationResult
                
                return GenerationResult(
                    success=False,
                    final_path=None,
                    generation_time=0.0,
                    error_message=str(e)
                )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
        WaveDreamPipeline.generate_track = patched_generate_track
        print("‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–∞—Ç—á –¥–ª—è final_path")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–∞—Ç—á: {e}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
patch_pipeline_final_path()
'''
    
    try:
        with open('emergency_pipeline_fix.py', 'w', encoding='utf-8') as f:
            f.write(patch_code)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω emergency_pipeline_fix.py")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ main.py:")
        print("     import emergency_pipeline_fix")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞—Ç—á–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ final_path")
    print("=" * 40)
    
    # 1. –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
    direct_fixed = fix_final_path_error()
    
    if direct_fixed:
        print("\n‚úÖ –ü—Ä—è–º–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
    else:
        print("\n‚ö†Ô∏è –ü—Ä—è–º–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
    
    # 2. –°–æ–∑–¥–∞—ë–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–∞—Ç—á –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    emergency_created = create_emergency_pipeline_fix()
    
    print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´!")
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    if direct_fixed:
        print("  1. ‚úÖ pipeline.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")
        print("  2. üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python main.py")
    
    if emergency_created:
        print("  3. üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ main.py:")
        print("       import emergency_pipeline_fix")
    
    print("\nüöÄ –¢–µ–ø–µ—Ä—å WaveDream –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å!")
    
    return 0

if __name__ == "__main__":
    import sys
    sys.exit(main())