import os
import json
import logging
from pydub import AudioSegment
from audiocraft.models import MusicGen
from audiocraft.data.audio import audio_write
from sample_picker import pick_samples
from SIG import load_index
from smart_mixer import smart_mix
from self_check import verify_mix
from mistral_client import query_structured_music

logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')

def generate_full_track(prompt, sample_dir, output_dir, model_name="facebook/musicgen-medium", professional=True):
    report_path = os.path.join(output_dir, "report.json")
    stems_dir = os.path.join(output_dir, "stems")
    os.makedirs(stems_dir, exist_ok=True)

    # === –®–∞–≥ 1. –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç Llama3 ===
    with open(report_path, "r", encoding="utf-8") as f:
        report = json.load(f)

    tempo = report["tempo"]
    structure = report["structure"]
    tracks = report["tracks"]

    # === –®–∞–≥ 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MusicGen ===
    logging.info(f"üéß –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ MusicGen: {model_name}")
    model = MusicGen.get_pretrained(model_name)
    model.set_generation_params(use_sampling=True, top_k=250, temperature=1.2)

    # === –®–∞–≥ 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MusicGen –ø–æ —Å–µ–∫—Ü–∏—è–º ===
    final_mix = AudioSegment.silent(duration=0)
    for i, part in enumerate(structure):
        duration = part["duration"]
        section_type = part["type"]
        tags = sorted(set(tag for track in tracks for tag in track.get("sample_tags", [])))
        prompt_section = f"{section_type} section, tempo {tempo}, style: {' '.join(tags)}"

        logging.info(f"üéº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {section_type.upper()} ({duration}s) ‚Üí {prompt_section}")
        model.set_generation_params(duration=duration)
        wav = model.generate([prompt_section])

        part_path = os.path.join(stems_dir, f"{i:02d}_{section_type}.wav")
        audio_write(part_path.replace(".wav", ""), wav[0].cpu(), model.sample_rate, strategy="loudness")
        final_mix += AudioSegment.from_wav(part_path)

    musicgen_path = os.path.join(stems_dir, "musicgen_original.wav")
    final_mix.export(musicgen_path, format="wav")
    logging.info(f"‚úÖ –ë–∞–∑–æ–≤—ã–π MusicGen —Ç—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {musicgen_path}")

    # === –®–∞–≥ 4. –ü–æ–¥–±–æ—Ä —Å—ç–º–ø–ª–æ–≤ –∏–∑ sample_dir (–∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è) ===
    logging.info("üîç –ü–æ–¥–±–æ—Ä –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—ç–º–ø–ª–æ–≤ –ø–æ —Ç–µ–≥–∞–º...")
    try:
        index = load_index()
    except:
        logging.error("‚ùå –ò–Ω–¥–µ–∫—Å —Å—ç–º–ø–ª–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return

    picked_tracks = []
    for track in tracks:
        picked = pick_samples(
            index,
            sample_tags=track["sample_tags"],
            genre_hint=None,
            top_k=1,
            energy=0.6,
            tempo=tempo
        )
        if picked:
            track["path"] = picked[0]
            picked_tracks.append(track)
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å—ç–º–ø–ª –¥–ª—è: {track['name']}")

    # === –®–∞–≥ 5. –°–º–∞—Ä—Ç-–º–∏–∫—Å –∏ —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–∏–∫—Å–∞ ===
    logging.info("üéõ –°–º–∞—Ä—Ç-–º–∏–∫—Å–∏–Ω–≥ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—ç–º–ø–ª–æ–≤...")
    smart_mix(report, sample_dir, output_dir=stems_dir)

    custom_mix_path = os.path.join(stems_dir, "custom_mix.wav")
    if not os.path.exists(custom_mix_path):
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å custom_mix.wav")
        return

    # === –®–∞–≥ 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ ===
    if professional:
        logging.info("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –ø—Ä–æ–º–ø—Ç—É...")
        result = verify_mix(custom_mix_path, prompt)
        if not result["ok"]:
            logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {result['reason']}")
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å –ø–æ–º–æ—â—å—é Llama3 (–∏–ª–∏ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏)
            logging.info("üõ† –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∞–≤–∫—É —Ç—Ä–µ–∫–∞...")
            fixed_path = os.path.join(stems_dir, "custom_fixed.wav")
            response = query_structured_music(prompt, audio_path=custom_mix_path, fix_mode=True)
            if response and os.path.exists(response):
                os.rename(response, fixed_path)
                logging.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {fixed_path}")
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç Llama3")
        else:
            logging.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, —Ç—Ä–µ–∫ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")

    logging.info("üéâ –í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")