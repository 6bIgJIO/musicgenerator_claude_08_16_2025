import os
import logging
from random import randint
from sample_aligner import align_sample_to_musicgen
from SIG import load_index

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
DEFAULT_TEMPO = 93
MEASURE_BEATS = 4

def parse_llama_json(json_data, base_wave_path, output_dir="output"):
    """
    –ü–∞—Ä—Å–∏—Ç JSON –æ—Ç LLaMA3 –∏ –≤—ã–∑—ã–≤–∞–µ—Ç align_sample_to_musicgen –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–π–º–ª–∞–π–Ω–∞.
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ, —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.
    """
    tempo = json_data.get("tempo", DEFAULT_TEMPO)
    structure = json_data.get("structure", [])
    tracks = json_data.get("tracks", [])

    sample_index = load_index()
    timeline = []

    beat_time = 60.0 / tempo
    current_time = 0.0
    logging.info(f"[‚öôÔ∏è] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {len(structure)} —Å–µ–∫—Ü–∏–π –ø—Ä–∏ {tempo} BPM")

    for section_idx, section in enumerate(structure):
        sec_type = section.get("type", f"section_{section_idx}")
        sec_duration_beats = section.get("duration", 16)
        sec_duration_secs = sec_duration_beats * beat_time

        logging.info(f"[üì¶] –°–µ–∫—Ü–∏—è '{sec_type}' ({sec_duration_beats} beats ‚âà {sec_duration_secs:.1f} sec)")

        for track in tracks:
            track_name = track.get("name", "unknown")
            tags = track.get("sample_tags", [])
            volume = track.get("volume", -6)

            logging.info(f" ‚îî‚îÄ üéö –¢—Ä–µ–∫ '{track_name}' | –¢–µ–≥–∏: {tags} | –ì—Ä–æ–º–∫–æ—Å—Ç—å: {volume}dB @ {current_time:.2f}s")

            result = align_sample_to_musicgen(
                base_path=base_wave_path,
                tags=tags,
                sample_index=sample_index,
                tempo=tempo,
                target_volume=volume
            )

            if result:
                segment, _ = result
                timeline.append({
                    "segment": segment,
                    "start_ms": int(current_time * 1000) + randint(0, 100),
                    "track": track_name,
                    "tags": tags,
                    "volume": volume,
                    "section": sec_type
                })

        current_time += sec_duration_secs

    return timeline