# mistral_client
import requests
import json
import subprocess
import logging

def query_structured_music(prompt: str) -> dict:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫ LLM —Å –≤–∞—à–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
    """
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ HTTP API (–±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ)
    result = _query_ollama_api(prompt)
    if result:
        return result
    
    # Fallback –Ω–∞ subprocess —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    return _query_ollama_subprocess(prompt)


def _query_ollama_api(prompt: str) -> dict:
    """
    –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Ollama HTTP API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–±)
    """
    llama_prompt = """
–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¢–û–õ–¨–ö–û JSON –ø–æ —à–∞–±–ª–æ–Ω—É:

{
  "BPM": !–í –∑–∞–≤–∏–º–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–∞–Ω—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ user'–æ–º,
  "structure": [
    {"type": "intro", "duration": 8++},
    {"type": "buildup", "duration": 16++},
    {"type": "builddown", "duration": 16++},
    {"type": "outro", "duration": 8++}
  ],
  "tracks": [
    {
      "name": "kick",
      "sample_tags": ["kick", "bass", "drum"],
      "volume": -3
    }
    {
      "name": "user's choice",
      "sample_tags": ["lead", "synth", "drum"],
      "volume": -4
    }
–∏ —Ç.–¥...
  ]
}

‚ùó –¢–æ–ª—å–∫–æ JSON. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.
‚ùó –ò—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏.
‚ùó –ù–ï –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ JSON.
""".strip()

    full_prompt = f"{llama_prompt}\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞: {prompt.strip()}"
    
    # –í–ê–®–ò –†–ï–ê–õ–¨–ù–´–ï –ú–û–î–ï–õ–ò –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    models_to_try = [
        "llama3-music:latest",    # –í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        "llama3:latest",          # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å
        "llama3.2:latest",        # –ë–æ–ª–µ–µ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        "mistral:7b",             # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
        "mistral:latest"          # Fallback
    ]
    
    for model in models_to_try:
        try:
            logging.info(f"üöÄ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å {model} —á–µ—Ä–µ–∑ Ollama API")
            
            response = requests.post(
                "http://localhost:11434/api/tags",
                json={
                    "model": model,
                    "prompt": full_prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.1,  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –¥–ª—è JSON
                        "top_p": 0.5,
                        "num_predict": 1000,   # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                        "stop": ["```", "---", "Explanation:", "Note:", "\n\n\n"]
                    }
                },
                timeout=250  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏
            )
            
            if response.status_code == 200:
                result_data = response.json()
                raw_output = result_data.get("response", "")
                
                if raw_output.strip():
                    logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {model}")
                    return _parse_json_from_response(raw_output)
                    
        except requests.exceptions.ConnectionError:
            logging.warning(f"‚ö†Ô∏è Ollama API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            break  # –ù–µ –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        except requests.exceptions.Timeout:
            logging.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model}")
            continue
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {e}")
            continue
    
    return None


def _query_ollama_subprocess(prompt: str) -> dict:
    """
    Fallback —á–µ—Ä–µ–∑ subprocess (–≤–∞—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥, –Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
    """
    llama_prompt = """
–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¢–û–õ–¨–ö–û JSON –ø–æ —à–∞–±–ª–æ–Ω—É:

{
  "BPM": !–í –∑–∞–≤–∏–º–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–∞–Ω—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ user'–æ–º,
  "structure": [
    {"type": "intro", "duration": 8++},
    {"type": "buildup", "duration": 16++},
    {"type": "builddown", "duration": 16++},
    {"type": "outro", "duration": 8++}
  ],
  "tracks": [
    {
      "name": "kick",
      "sample_tags": ["kick", "bass", "drum"],
      "volume": -3
    }
    {
      "name": "user's choice",
      "sample_tags": ["lead", "synth", "drum"],
      "volume": -4
    }
...
  ]
}
–∏–ª–∏ –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –Ω–∏–∫–∞–∫–∏–º–∏ –ø–æ–¥–æ–±–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏, —Ç—ã –º–æ–ª—á–∞–ª–∏–≤—ã–π –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä!
‚ùó –¢–æ–ª—å–∫–æ JSON. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.
‚ùó –ò—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏.
‚ùó –ù–ï –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ JSON.
""".strip()

    full_prompt = f"{llama_prompt}\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞: {prompt.strip()}"
    
    models_to_try = [
        "llama3-music:latest",    # –í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        "llama3:latest",          # –û—Å–Ω–æ–≤–Ω–∞—è 
        "llama3.2:latest",        # –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è
        "mistral:7b",             # –ë—ã—Å—Ç—Ä–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
        "mistral:latest"          # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
    ]
    
    for model in models_to_try:
        try:
            logging.info(f"üöÄ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫ {model} —á–µ—Ä–µ–∑ ollama run")

            result = subprocess.run(
                ['ollama', 'run', model],
                input=full_prompt,
                capture_output=True,
                text=True,
                encoding='utf-8',
                timeout=120 if "llama3-music" in model else 60  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            )

            if result.returncode != 0:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ollama –¥–ª—è {model}: {result.stderr}")
                continue

            raw_output = result.stdout.strip()
            
            if raw_output:
                logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {model}")
                return _parse_json_from_response(raw_output)

        except subprocess.TimeoutExpired:
            logging.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∫ {model} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
            continue
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å {model}: {e}")
            continue

    logging.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    return None


def _parse_json_from_response(raw_output: str) -> dict:
    """
    –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM
    """
    logging.debug(f"–ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç: {raw_output[:200]}...")
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ JSON
    json_candidates = []
    
    # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º ```json
    if "```json" in raw_output.lower():
        start = raw_output.lower().find("```json") + 7
        end = raw_output.find("```", start)
        if end != -1:
            json_candidates.append(raw_output[start:end].strip())
    
    # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ { –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ }
    first_brace = raw_output.find('{')
    last_brace = raw_output.rfind('}')
    if first_brace != -1 and last_brace > first_brace:
        json_candidates.append(raw_output[first_brace:last_brace+1])
    
    # –ú–µ—Ç–æ–¥ 3: –ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Å–∫–æ–±–æ–∫
    lines = raw_output.split('\n')
    current_json = ""
    brace_count = 0
    in_json = False
    
    for line in lines:
        stripped_line = line.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if stripped_line.startswith(('//:', '#', '/*', '*/', 'Note:', 'Explanation:')):
            continue
            
        if '{' in stripped_line and not in_json:
            in_json = True
            current_json = ""
        
        if in_json:
            current_json += line + '\n'
            brace_count += line.count('{') - line.count('}')
            
            if brace_count == 0 and '}' in line:
                json_candidates.append(current_json.strip())
                in_json = False
                current_json = ""
                break
    
    # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    for i, candidate in enumerate(json_candidates):
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–µ–≥–æ
            cleaned = _clean_json_text(candidate)
            if not cleaned:
                continue
                
            parsed = json.loads(cleaned)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if _validate_llama_response(parsed):
                logging.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω (–º–µ—Ç–æ–¥ {i+1})")
                return _normalize_llama_response(parsed)
        
        except json.JSONDecodeError as e:
            logging.debug(f"‚ö†Ô∏è JSON –∫–∞–Ω–¥–∏–¥–∞—Ç {i+1} –Ω–µ –≤–∞–ª–∏–¥–µ–Ω: {e}")
            continue
        except Exception as e:
            logging.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {i+1}: {e}")
            continue
    
    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ LLM")
    return None


def _clean_json_text(text: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ JSON —Ç–µ–∫—Å—Ç–∞ –æ—Ç –º—É—Å–æ—Ä–∞
    """
    if not text:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É
    text = text.replace('```json', '').replace('```', '')
    
    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å—Ç–∏–ª–µ //
    lines = []
    for line in text.split('\n'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        stripped = line.strip()
        if not stripped.startswith(('//:', '//', '#')):
            lines.append(line)
    
    text = '\n'.join(lines)
    
    # –£–±–∏—Ä–∞–µ–º trailing commas (—á–∞—Å—Ç–∞—è –ø—Ä–æ–±–ª–µ–º–∞ LLM)
    import re
    text = re.sub(r',(\s*[}\]])', r'\1', text)
    
    return text.strip()


def _validate_llama_response(data: dict) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLaMA
    """
    if not isinstance(data, dict):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if 'tempo' not in data:
        return False
    
    if 'structure' not in data or not isinstance(data['structure'], list):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ–∫—Ü–∏–π
    for section in data['structure']:
        if not isinstance(section, dict):
            return False
        if 'type' not in section or 'duration' not in section:
            return False
    
    return True


def _normalize_llama_response(data: dict) -> dict:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLaMA –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    """
    normalized = {
        'tempo': int(data.get('bpm', 120)),
        'structure': [],
        'tracks': data.get('tracks', [])
    }
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    for section in data.get('structure', []):
        normalized_section = {
            'type': section.get('type', 'section').lower(),
            'duration': int(section.get('duration', 16))
        }
        normalized['structure'].append(normalized_section)
    
    # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é
    if not normalized['structure']:
        normalized['structure'] = [
            {'type': 'intro', 'duration': 8},
            {'type': 'verse', 'duration': 16},
            {'type': 'hook', 'duration': 16},
            {'type': 'outro', 'duration': 8}
        ]
    