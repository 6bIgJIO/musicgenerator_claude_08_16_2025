# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô musicgen_wrapper.py
# –ó–∞–º–µ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ —ç—Ç–æ:

import torch
import torchaudio
import io
import numpy as np
import soundfile as sf
from typing import Optional, List, Dict, Union
import warnings
import logging
import time
from pydub import AudioSegment
from pydub.generators import Sine, Square, WhiteNoise

warnings.filterwarnings("ignore")

class MusicGenEngine:
    def __init__(self, model_name: str = "facebook/musicgen-medium"):
        self.logger = logging.getLogger(__name__)
        self.model = None
        self.model_name = model_name
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.MUSICGEN_AVAILABLE = False
        self.use_fallback = False  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ fallback
        self._load_model()

    def _load_model(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º fallback"""
        try:
            self.logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {self.model_name}")
            
            # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å audiocraft
            try:
                from audiocraft.models import musicgen
                AUDIOCRAFT_AVAILABLE = True
            except ImportError as e:
                self.logger.error(f"‚ùå Audiocraft –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                AUDIOCRAFT_AVAILABLE = False
            
            if AUDIOCRAFT_AVAILABLE:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
                fallback_models = [
                    "facebook/musicgen-small",  # –°–∞–º–∞—è –ª—ë–≥–∫–∞—è –º–æ–¥–µ–ª—å
                    "facebook/musicgen-medium",
                    self.model_name
                ]
                
                for model_name in fallback_models:
                    try:
                        self.logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å: {model_name}")
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π timeout
                        import signal
                        
                        def timeout_handler(signum, frame):
                            raise TimeoutError("Model loading timeout")
                        
                        old_handler = signal.signal(signal.SIGALRM, timeout_handler)
                        signal.alarm(30)  # 30 —Å–µ–∫—É–Ω–¥ timeout
                        
                        try:
                            self.model = musicgen.MusicGen.get_pretrained(model_name)
                            self.model.set_generation_params(duration=8)
                            self.model_name = model_name
                            self.MUSICGEN_AVAILABLE = True
                            
                            signal.alarm(0)  # –û—Ç–º–µ–Ω—è–µ–º timeout
                            signal.signal(signal.SIGALRM, old_handler)
                            
                            self.logger.info(f"‚úÖ MusicGen —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {model_name} –Ω–∞ {self.device}")
                            return
                            
                        except Exception as model_error:
                            signal.alarm(0)
                            signal.signal(signal.SIGALRM, old_handler)
                            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {model_name}: {model_error}")
                            continue
                            
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {model_name}: {e}")
                        continue
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            self.logger.warning("‚ö†Ô∏è MusicGen –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º fallback")
            self.use_fallback = True
            self.MUSICGEN_AVAILABLE = False
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            self.use_fallback = True
            self.MUSICGEN_AVAILABLE = False

    async def generate(
        self,
        prompt: str,
        duration: int = 30,
        temperature: float = 1.0,
        top_k: int = 250,
        top_p: float = 0.0,
        genre_hint: Optional[str] = None
    ) -> bytes:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∞—É–¥–∏–æ"""
        
        self.logger.info(f"üéº Generating: '{prompt}' ({duration}s)")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞—É–¥–∏–æ, –¥–∞–∂–µ –µ—Å–ª–∏ MusicGen –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if not self.model or not self.MUSICGEN_AVAILABLE or self.use_fallback:
            self.logger.warning("üîÑ MusicGen –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π fallback")
            return await self._generate_intelligent_fallback(prompt, duration, genre_hint)

        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é MusicGen
            safe_duration = min(duration, 30)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            
            self.model.set_generation_params(
                duration=safe_duration,
                use_sampling=True,
                temperature=temperature,
                top_k=top_k,
                top_p=top_p
            )

            enhanced_prompt = self._enhance_prompt_for_genre(prompt, genre_hint)
            self.logger.info(f"üìù Enhanced prompt: {enhanced_prompt}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å timeout
            with torch.no_grad():
                start_time = time.time()
                wav_tensor = self.model.generate([enhanced_prompt])
                generation_time = time.time() - start_time
                
                self.logger.info(f"‚è±Ô∏è MusicGen generation time: {generation_time:.2f}s")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if wav_tensor is None or wav_tensor.numel() == 0:
                self.logger.warning("‚ö†Ô∏è MusicGen –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._generate_intelligent_fallback(prompt, duration, genre_hint)

            self.logger.info(f"üîä Generated tensor shape: {wav_tensor.shape}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–Ω–∑–æ—Ä
            if wav_tensor.dim() == 3:
                audio_array = wav_tensor[0].cpu().numpy()
            elif wav_tensor.dim() == 2:
                audio_array = wav_tensor.cpu().numpy()
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ —Ç–µ–Ω–∑–æ—Ä–∞: {wav_tensor.shape}")
                return await self._generate_intelligent_fallback(prompt, duration, genre_hint)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            if audio_array.max() > 1.0 or audio_array.min() < -1.0:
                audio_array = audio_array / max(abs(audio_array.max()), abs(audio_array.min()))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞
            rms = np.sqrt(np.mean(audio_array**2))
            self.logger.info(f"üîä Generated audio RMS: {rms:.6f}")

            if rms < 1e-6:
                self.logger.warning("‚ö†Ô∏è –û—á–µ–Ω—å —Ç–∏—Ö–∏–π –∑–≤—É–∫, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å")
                audio_array = audio_array * 1000
                audio_array = np.clip(audio_array, -1.0, 1.0)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            sample_rate = self.model.sample_rate
            audio_bytes = self._array_to_wav_bytes(audio_array, sample_rate)

            if len(audio_bytes) < 1000:
                self.logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª: {len(audio_bytes)} bytes, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._generate_intelligent_fallback(prompt, duration, genre_hint)

            self.logger.info(f"‚úÖ MusicGen generation completed: {len(audio_bytes)} bytes")
            return audio_bytes

        except Exception as e:
            self.logger.error(f"‚ùå MusicGen generation error: {e}")
            self.logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
            return await self._generate_intelligent_fallback(prompt, duration, genre_hint)

    async def _generate_intelligent_fallback(self, prompt: str, duration: int, genre: Optional[str]) -> bytes:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π fallback –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ –∂–∞–Ω—Ä–∞"""
        
        self.logger.info(f"üéπ Generating intelligent fallback: '{prompt}' ({duration}s, genre: {genre})")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–∞
            genre = genre or "electronic"  # –î–µ—Ñ–æ–ª—Ç
            genre = genre.lower()
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∂–∞–Ω—Ä–∞–º
            genre_params = {
                "trap": {"bpm": 160, "bass_freq": 60, "energy": 0.8, "style": "aggressive"},
                "lofi": {"bpm": 80, "bass_freq": 80, "energy": 0.3, "style": "chill"},
                "dnb": {"bpm": 174, "bass_freq": 55, "energy": 0.9, "style": "energetic"},
                "ambient": {"bpm": 60, "bass_freq": 40, "energy": 0.2, "style": "ethereal"},
                "techno": {"bpm": 128, "bass_freq": 65, "energy": 0.8, "style": "driving"},
                "house": {"bpm": 124, "bass_freq": 70, "energy": 0.7, "style": "groovy"},
                "cinematic": {"bpm": 90, "bass_freq": 50, "energy": 0.6, "style": "epic"},
                "electronic": {"bpm": 120, "bass_freq": 65, "energy": 0.6, "style": "modern"}
            }
            
            params = genre_params.get(genre, genre_params["electronic"])
            
            bpm = params["bpm"]
            bass_freq = params["bass_freq"]
            energy = params["energy"]
            style = params["style"]
            
            self.logger.info(f"üéõÔ∏è Fallback params: {bpm}BPM, energy={energy}, style={style}")
            
            # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π —Ä–∏—Ç–º
            duration_ms = int(duration * 1000)
            beat_duration = int(60000 / bpm)  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –±–∏—Ç–∞ –≤ –º—Å
            
            # –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            kick = self._create_kick(bass_freq, energy)
            snare = self._create_snare(energy)
            hihat = self._create_hihat(energy)
            
            # –°–æ–∑–¥–∞—ë–º –º–µ–ª–æ–¥–∏—é/–≥–∞—Ä–º–æ–Ω–∏—é
            melody = self._create_melody_for_genre(genre, duration_ms, bpm, energy)
            
            # –°–æ–∑–¥–∞—ë–º —Ä–∏—Ç–º-—Å–µ–∫—Ü–∏—é
            rhythm = self._create_rhythm_section(kick, snare, hihat, duration_ms, bpm, genre, energy)
            
            # –ú–∏–∫—à–∏—Ä—É–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ
            if len(melody) > len(rhythm):
                melody = melody[:len(rhythm)]
            elif len(rhythm) > len(melody):
                # –î—É–±–ª–∏—Ä—É–µ–º –º–µ–ª–æ–¥–∏—é –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
                melody = melody * (len(rhythm) // len(melody) + 1)
                melody = melody[:len(rhythm)]
            
            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–µ–ª–æ–¥–∏—é –Ω–∞ —Ä–∏—Ç–º
            final_audio = rhythm.overlay(melody)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∂–∞–Ω—Ä–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            final_audio = self._apply_genre_effects(final_audio, genre, energy)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            final_audio = final_audio.normalize(headroom=3.0)
            
            buffer = io.BytesIO()
            final_audio.export(buffer, format="wav")
            audio_bytes = buffer.getvalue()
            buffer.close()
            
            self.logger.info(f"‚úÖ Intelligent fallback completed: {len(audio_bytes)} bytes")
            return audio_bytes
            
        except Exception as e:
            self.logger.error(f"‚ùå Intelligent fallback failed: {e}")
            return self._create_emergency_audio(duration)

    def _create_kick(self, freq: int, energy: float) -> AudioSegment:
        """–°–æ–∑–¥–∞–Ω–∏–µ kick-–¥—Ä–∞–º–∞"""
        kick = Sine(freq).to_audio_segment(duration=200)
        kick = kick.fade_in(10).fade_out(150)
        kick = kick.apply_gain(-6 + energy * 8)  # –ì—Ä–æ–º–∫–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–Ω–µ—Ä–≥–∏–∏
        return kick

    def _create_snare(self, energy: float) -> AudioSegment:
        """–°–æ–∑–¥–∞–Ω–∏–µ snare"""
        noise = WhiteNoise().to_audio_segment(duration=150)
        tone = Sine(200).to_audio_segment(duration=150)
        snare = noise.overlay(tone)
        snare = snare.band_pass_filter(200, 4000)
        snare = snare.apply_gain(-10 + energy * 6)
        return snare

    def _create_hihat(self, energy: float) -> AudioSegment:
        """–°–æ–∑–¥–∞–Ω–∏–µ hi-hat"""
        hihat = WhiteNoise().to_audio_segment(duration=80)
        hihat = hihat.high_pass_filter(8000)
        hihat = hihat.apply_gain(-15 + energy * 5)
        return hihat

    def _create_melody_for_genre(self, genre: str, duration_ms: int, bpm: int, energy: float) -> AudioSegment:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–ª–æ–¥–∏–∏ –ø–æ–¥ –∂–∞–Ω—Ä"""
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–æ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
        genre_scales = {
            "trap": [60, 63, 65, 67, 70, 72],  # C, Eb, F, G, Bb, C (–º–∏–Ω–æ—Ä–Ω—ã–π)
            "lofi": [60, 62, 64, 67, 69],      # –ü–µ–Ω—Ç–∞—Ç–æ–Ω–∏–∫–∞
            "ambient": [60, 64, 67, 72, 76],   # –ú–∞–∂–æ—Ä–Ω–æ–µ —Ç—Ä–µ–∑–≤—É—á–∏–µ + –æ–∫—Ç–∞–≤—ã
            "techno": [60, 60, 67, 67],        # –ü—Ä–æ—Å—Ç—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            "cinematic": [48, 52, 55, 60, 64], # –ù–∏–∑–∫–∏–µ –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–µ –Ω–æ—Ç—ã
        }
        
        scale = genre_scales.get(genre, [60, 64, 67, 72])  # –î–µ—Ñ–æ–ª—Ç
        
        melody = AudioSegment.silent(duration=0)
        note_duration = int(60000 / bpm * 2)  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—Ç—ã
        
        total_notes_needed = duration_ms // note_duration + 1
        
        for i in range(total_notes_needed):
            # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ—Ç—É –∏–∑ –≥–∞–º–º—ã
            midi_note = scale[i % len(scale)]
            freq = 440 * (2 ** ((midi_note - 69) / 12))  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MIDI –≤ —á–∞—Å—Ç–æ—Ç—É
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ—Ç—É
            if genre in ["ambient", "cinematic"]:
                note = Sine(freq).to_audio_segment(duration=note_duration * 2)
                note = note.fade_in(100).fade_out(100)
            else:
                note = Square(freq).to_audio_segment(duration=note_duration)
                note = note.fade_in(10).fade_out(10)
            
            note = note.apply_gain(-20 + energy * 10)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—ã –¥–ª—è —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç–∏
            if genre == "trap" and i % 4 == 3:
                pause = AudioSegment.silent(duration=note_duration // 2)
                melody += note + pause
            else:
                melody += note
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
        return melody[:duration_ms]

    def _create_rhythm_section(self, kick: AudioSegment, snare: AudioSegment, hihat: AudioSegment, 
                              duration_ms: int, bpm: int, genre: str, energy: float) -> AudioSegment:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∏—Ç–º-—Å–µ–∫—Ü–∏–∏"""
        
        beat_duration = int(60000 / bpm)
        step_duration = beat_duration // 4  # 16-—è –Ω–æ—Ç–∞
        
        # –†–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ –∂–∞–Ω—Ä–∞–º
        patterns = {
            "trap": {
                "kick":  [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                "snare": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                "hihat": [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1],
            },
            "dnb": {
                "kick":  [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                "snare": [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                "hihat": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
            },
            "house": {
                "kick":  [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                "snare": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                "hihat": [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
            },
            "lofi": {
                "kick":  [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                "snare": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                "hihat": [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
            }
        }
        
        pattern = patterns.get(genre, patterns.get("house", patterns["trap"]))
        
        # –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω —Ç–∞–∫—Ç
        bar = AudioSegment.silent(duration=beat_duration * 4)
        
        for instrument, inst_pattern in pattern.items():
            sound = {"kick": kick, "snare": snare, "hihat": hihat}[instrument]
            
            for i, hit in enumerate(inst_pattern):
                if hit:
                    pos = i * step_duration
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏
                    if energy > 0.7 and np.random.random() < 0.2:
                        varied_sound = sound.apply_gain(np.random.randint(-2, 3))
                        bar = bar.overlay(varied_sound, position=pos)
                    else:
                        bar = bar.overlay(sound, position=pos)
        
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–∞–∫—Ç –Ω–∞ –≤—Å—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        bars_needed = duration_ms // len(bar) + 1
        rhythm = bar * bars_needed
        return rhythm[:duration_ms]

    def _apply_genre_effects(self, audio: AudioSegment, genre: str, energy: float) -> AudioSegment:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        
        if genre == "lofi":
            # –í–∏–Ω—Ç–∞–∂–Ω—ã–π –∑–≤—É–∫
            audio = audio.low_pass_filter(8000)
            audio = audio.apply_gain(-3)
            
        elif genre == "trap":
            # –¢—è–∂—ë–ª—ã–µ –±–∞—Å—ã
            audio = audio.low_pass_filter(15000)
            
        elif genre == "ambient":
            # –†–µ–≤–µ—Ä–± —ç—Ñ—Ñ–µ–∫—Ç (–∏–º–∏—Ç–∞—Ü–∏—è)
            reverb_delay = 150
            reverb_audio = audio.apply_gain(-15)
            for i in range(3):
                audio = audio.overlay(reverb_audio, position=reverb_delay * (i + 1))
                
        elif genre == "dnb":
            # –Ø—Ä–∫–∏–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∑–≤—É–∫
            audio = audio.apply_gain(2)
            
        return audio

    def _array_to_wav_bytes(self, audio_array: np.ndarray, sample_rate: int) -> bytes:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è numpy array –≤ WAV bytes"""
        buffer = io.BytesIO()
        
        if audio_array.ndim == 1:
            sf.write(buffer, audio_array, sample_rate, format='WAV')
        else:
            if audio_array.shape[0] == 2:
                sf.write(buffer, audio_array.T, sample_rate, format='WAV')
            else:
                sf.write(buffer, audio_array[0], sample_rate, format='WAV')
        
        audio_bytes = buffer.getvalue()
        buffer.close()
        return audio_bytes

    def _create_emergency_audio(self, duration: int) -> bytes:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ"""
        self.logger.warning("üö® Creating emergency audio")
        
        try:
            sample_rate = 44100
            samples = int(sample_rate * duration)
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫ - –º–∏–∫—Å —à—É–º–∞ –∏ —Ç–æ–Ω–æ–≤
            t = np.linspace(0, duration, samples)
            noise = np.random.normal(0, 0.05, samples)
            tone1 = np.sin(2 * np.pi * 220 * t) * 0.1  # A3
            tone2 = np.sin(2 * np.pi * 330 * t) * 0.1  # E4
            
            audio_array = (noise + tone1 + tone2).astype(np.float32)
            audio_array = np.clip(audio_array, -1.0, 1.0)
            
            buffer = io.BytesIO()
            sf.write(buffer, audio_array, sample_rate, format='WAV')
            return buffer.getvalue()
            
        except Exception as e:
            self.logger.error(f"‚ùå Emergency audio creation failed: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–∏—à–∏–Ω–æ–π
            return self._create_silent_wav(duration)

    def _create_silent_wav(self, duration: int) -> bytes:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏—à–∏–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ WAV"""
        sample_rate = 44100
        samples = int(sample_rate * duration)
        
        # WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
        import struct
        header = struct.pack('<4sI4s4sIHHIIHH4sI',
            b'RIFF',
            36 + samples * 2,
            b'WAVE',
            b'fmt ',
            16, 1, 1,  # PCM, mono
            sample_rate,
            sample_rate * 2,
            2, 16,     # 16-bit
            b'data',
            samples * 2
        )
        
        # –¢–∏—à–∏–Ω–∞
        data = b'\x00\x00' * samples
        return header + data

    def _enhance_prompt_for_genre(self, prompt: str, genre: Optional[str]) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∂–∞–Ω—Ä–∞"""
        if not genre:
            return prompt

        genre_enhancements = {
            "trap": "heavy 808s, tight snares, dark atmosphere, aggressive",
            "lofi": "warm analog sound, vinyl texture, mellow vibes, nostalgic",
            "dnb": "fast breakbeats, heavy bass, energetic, liquid",
            "ambient": "ethereal pads, spacious reverb, peaceful, atmospheric",
            "techno": "driving four-on-the-floor, hypnotic, industrial, minimal",
            "house": "groovy four-on-the-floor, soulful, danceable, uplifting",
            "cinematic": "epic orchestral, dramatic, heroic, emotional"
        }

        enhancement = genre_enhancements.get(genre.lower(), "")
        if enhancement:
            enhanced = f"{prompt}, {enhancement}"
            return enhanced
        return prompt

# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å fallback –æ—Ç–¥–µ–ª—å–Ω–æ:
if __name__ == "__main__":
    import asyncio
    
    async def test_fallback():
        engine = MusicGenEngine()
        engine.use_fallback = True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π fallback
        
        print("üß™ Testing fallback generation...")
        
        test_cases = [
            ("dark trap beat", "trap"),
            ("chill lofi vibes", "lofi"),
            ("epic cinematic music", "cinematic"),
            ("energetic dnb", "dnb")
        ]
        
        for prompt, genre in test_cases:
            print(f"\nüéµ Testing: {prompt} ({genre})")
            audio_bytes = await engine.generate(prompt, duration=10, genre_hint=genre)
            
            if audio_bytes and len(audio_bytes) > 1000:
                print(f"‚úÖ Success: {len(audio_bytes)} bytes")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                with open(f"test_{genre}_fallback.wav", "wb") as f:
                    f.write(audio_bytes)
            else:
                print(f"‚ùå Failed: {len(audio_bytes) if audio_bytes else 0} bytes")
    
    asyncio.run(test_fallback())
