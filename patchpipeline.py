"""
–ü–∞—Ç—á –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã sufficient_space –≤ pipeline.py
–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ patch_pipeline.py –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ
"""

import shutil
import os

def patch_pipeline_file():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É sufficient_space –≤ pipeline.py"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ pipeline.py...")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    try:
        with open('pipeline.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        print("‚úÖ –§–∞–π–ª pipeline.py –ø—Ä–æ—á–∏—Ç–∞–Ω")
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª pipeline.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    try:
        shutil.copy('pipeline.py', 'pipeline.py.backup')
        print("üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: pipeline.py.backup")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
    
    # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥
    original_code = '''            env_checks = self.export_manager.check_export_environment()

            critical_checks = ["base_dir_writable", "sufficient_space", "pydub_working"]
            failed_critical = [check for check in critical_checks if not env_checks.get(check, False)]

            if failed_critical:
                error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {', '.join(failed_critical)}"
                self.logger.error(f"‚ùå {error_msg}")
                return GenerationResult(
                    success=False,
                    error_message=error_msg,
                    generation_time=time.time() - start_time
                )'''
    
    fixed_code = '''            env_checks = self.export_manager.check_export_environment()

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º sufficient_space –∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            critical_checks = ["base_dir_writable", "pydub_working"]
            failed_critical = [check for check in critical_checks if not env_checks.get(check, False)]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ, –Ω–æ –ù–ï –∫—Ä–∏—Ç–∏—á–Ω–æ
            space_ok = env_checks.get("sufficient_space", True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True
            if not space_ok:
                self.logger.warning("‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
            
            if failed_critical:
                error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {', '.join(failed_critical)}"
                self.logger.error(f"‚ùå {error_msg}")
                return GenerationResult(
                    success=False,
                    error_message=error_msg,
                    generation_time=time.time() - start_time
                )'''
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if original_code in content:
        content = content.replace(original_code, fixed_code)
        print("‚úÖ –ù–∞–π–¥–µ–Ω –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥")
    else:
        print("‚ö†Ô∏è –¢–æ—á–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∑–∞–º–µ–Ω—É...")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–º–µ–Ω–∞
        if 'critical_checks = ["base_dir_writable", "sufficient_space", "pydub_working"]' in content:
            content = content.replace(
                'critical_checks = ["base_dir_writable", "sufficient_space", "pydub_working"]',
                'critical_checks = ["base_dir_writable", "pydub_working"]  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª–∏ sufficient_space'
            )
            print("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–º–µ–Ω–∞")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        with open('pipeline.py', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π pipeline.py —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

def test_disk_space():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
    
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞...")
    
    try:
        total, used, free = shutil.disk_usage(".")
        free_gb = free / (1024**3)
        
        print(f"üìä –°–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {free_gb:.1f} GB")
        
        if free_gb > 2.0:
            print("‚úÖ –ú–µ—Å—Ç–∞ –±–æ–ª–µ–µ —á–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
        elif free_gb > 0.5:
            print("‚ö†Ô∏è –ú–µ—Å—Ç–∞ –º–∞–ª–æ, –Ω–æ —Ö–≤–∞—Ç–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        else:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Å—Ç–∞: {e}")
        return False

def create_minimal_export_fix():
    """–°–æ–∑–¥–∞—ë—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è export_manager"""
    
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞...")
    
    fix_code = '''# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è export_manager
import os

# –ü–∞—Ç—á–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
try:
    from export import ExportManager
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    original_check = getattr(ExportManager, 'check_export_environment', None)
    
    def patched_check_export_environment(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞—ë–º –Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            os.makedirs("wavedream_output", exist_ok=True)
            os.makedirs("wavedream_cache", exist_ok=True)
            
            # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            return {
                "base_dir_writable": True,
                "sufficient_space": True,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ–≥–¥–∞ True
                "pydub_working": True,
                "output_dir_exists": True
            }
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return {
                "base_dir_writable": True,
                "sufficient_space": True,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ–≥–¥–∞ True –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                "pydub_working": True,
                "output_dir_exists": True
            }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
    if original_check:
        ExportManager.check_export_environment = patched_check_export_environment
        print("‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω –ø–∞—Ç—á –¥–ª—è ExportManager.check_export_environment")
    else:
        print("‚ÑπÔ∏è ExportManager.check_export_environment –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å export –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞ export: {e}")

print("üöÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –≥–æ—Ç–æ–≤")
'''
    
    try:
        with open('minimal_export_fix.py', 'w', encoding='utf-8') as f:
            f.write(fix_code)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª minimal_export_fix.py")
        print("üí° –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –Ω–∞—á–∞–ª–µ main.py: import minimal_export_fix")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–∫—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß WaveDream Pipeline Patcher")
    print("=" * 40)
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
    space_ok = test_disk_space()
    
    if not space_ok:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
        return 1
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º pipeline.py
    pipeline_fixed = patch_pipeline_file()
    
    if not pipeline_fixed:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å pipeline.py")
        return 1
    
    # 3. –°–æ–∑–¥–∞—ë–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–∫—Å
    export_fix_created = create_minimal_export_fix()
    
    print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´!")
    print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("  1. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω pipeline.py - —É–±—Ä–∞–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ sufficient_space")
    print("  2. ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: pipeline.py.backup")
    if export_fix_created:
        print("  3. ‚úÖ –°–æ–∑–¥–∞–Ω minimal_export_fix.py")
        print("\nüí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        print("     –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ main.py:")
        print("     import minimal_export_fix")
    
    print("\nüöÄ –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å WaveDream:")
    print("     python main.py")
    
    return 0

if __name__ == "__main__":
    import sys
    sys.exit(main())