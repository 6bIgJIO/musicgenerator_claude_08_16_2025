# WaveDream Enhanced - –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–±–æ—Ä–∞ —Å—ç–º–ø–ª–æ–≤
import os
import json
import random
import re
import logging
import librosa
import numpy as np
from collections import defaultdict, Counter
from pydub import AudioSegment
import soundfile as sf
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')

class EnhancedSamplePicker:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–±–æ—Ä–∞ —Å—ç–º–ø–ª–æ–≤ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º"""
    
    def __init__(self, sample_dir, index_file="enhanced_sample_index.json"):
        self.sample_dir = sample_dir
        self.index_file = os.path.join(sample_dir, index_file)

        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ —Ç–µ–≥–æ–≤ —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–≤—è–∑—è–º–∏
        self.semantic_tags = {
            # Percussion —Å–µ–º–∞–Ω—Ç–∏–∫–∞
            "kick": ["kick", "bd", "bass_drum", "thump", "punch", "boom", "sub_kick"],
            "snare": ["snare", "snr", "crack", "snap", "clap", "rim", "backbeat"],
            "hihat": ["hat", "hh", "hi_hat", "closed_hat", "open_hat", "cymbal"],
            "clap": ["clap", "snap", "handclap", "finger_snap"],
            "percussion": ["perc", "percussion", "bongo", "conga", "shaker", "tambourine"],
            
            # Bass —Å–µ–º–∞–Ω—Ç–∏–∫–∞
            "bass": ["bass", "sub", "low", "808", "reese", "growl", "wobble"],
            "808": ["808", "sub_bass", "kick_bass", "trap_bass", "sliding_bass"],
            
            # Melodic —Å–µ–º–∞–Ω—Ç–∏–∫–∞
            "lead": ["lead", "melody", "synth", "arps", "keys", "piano", "guitar"],
            "pad": ["pad", "strings", "ambient", "texture", "drone", "atmosphere"],
            "piano": ["piano", "keys", "electric_piano", "rhodes", "organ"],
            "guitar": ["guitar", "strum", "pluck", "acoustic", "electric"],
            
            # Vocal —Å–µ–º–∞–Ω—Ç–∏–∫–∞
            "vocal": ["vocal", "voice", "vox", "choir", "chant", "rap", "sung"],
            "vocal_chop": ["vocal_chop", "chop", "stutter", "slice"],
            
            # FX —Å–µ–º–∞–Ω—Ç–∏–∫–∞
            "fx": ["fx", "effect", "sweep", "riser", "impact", "whoosh", "transition"],
            "riser": ["riser", "sweep", "build", "tension", "uplifter"],
            
            # Genre-specific
            "trap": ["trap", "drill", "dark", "hard", "aggressive"],
            "house": ["house", "groove", "funky", "disco", "four_on_floor"],
            "techno": ["techno", "industrial", "minimal", "hypnotic"],
            "ambient": ["ambient", "chill", "relax", "meditation", "space"]
        }
        
        # –ñ–∞–Ω—Ä–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è BPM –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        self.genre_bpm_ranges = {
            "trap": (130, 170),
            "dnb": (160, 180), 
            "house": (118, 128),
            "techno": (120, 135),
            "ambient": (60, 90),
            "lofi": (60, 85)
        }

        self.index = self.load_or_build_index()

    def analyze_filename_advanced(self, filename):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º BPM, —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–≥–æ–≤"""
        name = filename.lower()
        tags = set()
        bpm = 120
        key = None
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ BPM –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        bpm_patterns = [
            r'(\d{2,3})bpm',
            r'(\d{2,3})_bpm', 
            r'bpm(\d{2,3})',
            r'(\d{2,3})beats',
            r'tempo_?(\d{2,3})'
        ]
        
        for pattern in bpm_patterns:
            match = re.search(pattern, name)
            if match:
                bpm = int(match.group(1))
                break
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        key_patterns = [
            r'\b([a-g]#?)\s*m(?:inor)?\b',
            r'\b([a-g]#?)\s*maj(?:or)?\b',
            r'key_([a-g]#?)',
            r'in_([a-g]#?)'
        ]
        
        for pattern in key_patterns:
            match = re.search(pattern, name)
            if match:
                key = match.group(1).upper()
                break
        
        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        for tag_category, keywords in self.semantic_tags.items():
            for keyword in keywords:
                if keyword in name:
                    tags.add(tag_category)
                    
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∂–∞–Ω—Ä–æ–≤
        genre_patterns = {
            "trap": ["trap", "drill", "phonk", "memphis", "dark", "hard", "aggressive"],
            "house": ["house", "groove", "funky", "disco", "dance", "club"],
            "techno": ["techno", "tech", "minimal", "industrial", "berlin"],
            "dnb": ["dnb", "drum", "bass", "jungle", "break", "neuro"],
            "ambient": ["ambient", "chill", "space", "drone", "meditation"],
            "lofi": ["lofi", "lo-fi", "jazzy", "vinyl", "dusty", "vintage"]
        }
        
        for genre, patterns in genre_patterns.items():
            if any(p in name for p in patterns):
                tags.add(genre)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        instrument_patterns = {
            "kick": ["kick", "bd", "bass_drum", "thump"],
            "snare": ["snare", "snr", "crack", "rim"],
            "hihat": ["hat", "hh", "hi_hat", "cymbal"],
            "bass": ["bass", "sub", "low", "808"],
            "lead": ["lead", "melody", "synth", "keys"],
            "pad": ["pad", "string", "ambient", "texture"],
            "vocal": ["vocal", "voice", "vox", "choir"],
            "fx": ["fx", "sweep", "riser", "impact", "whoosh"]
        }
        
        for instrument, patterns in instrument_patterns.items():
            if any(p in name for p in patterns):
                tags.add(instrument)
        
        return list(tags), bpm, key

    def analyze_audio_content(self, file_path, max_duration=10):
        """–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        try:
            y, sr = librosa.load(file_path, duration=max_duration, sr=22050)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–∞
            tempo, _ = librosa.beat.beat_track(y=y, sr=sr)
            tempo = float(tempo)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏  
            chroma = librosa.feature.chroma_cqt(y=y, sr=sr)
            if chroma.size > 0:
                chroma_mean = chroma.mean(axis=1)
                key_idx = chroma_mean.argmax()
                keys = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
                key = keys[key_idx]
            else:
                key = None
            
            # –ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            spectral_centroid = librosa.feature.spectral_centroid(y=y, sr=sr).mean()
            spectral_rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr).mean()
            zero_crossing_rate = librosa.feature.zero_crossing_rate(y).mean()
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
            content_tags = []
            
            # –ù–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–±–∞—Å, –∫–∏–∫)
            if spectral_centroid < 1000:
                content_tags.extend(["bass", "kick", "sub"])
            
            # –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ö—ç—Ç—ã, —Ç–∞—Ä–µ–ª–∫–∏)
            elif spectral_centroid > 8000:
                content_tags.extend(["hihat", "cymbal", "fx"])
                
            # –°—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã (—Å–Ω–µ–π—Ä, –º–µ–ª–æ–¥–∏—è)
            elif 2000 < spectral_centroid < 6000:
                content_tags.extend(["snare", "lead", "melody"])
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç–∏
            if zero_crossing_rate > 0.1:
                content_tags.extend(["percussion", "rhythmic"])
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É–ø–æ–≤ vs one-shots
            if len(y) / sr > 8:  # –î–ª–∏–Ω–Ω–µ–µ 8 —Å–µ–∫—É–Ω–¥ = –≤–µ—Ä–æ—è—Ç–Ω–æ –ª—É–ø
                content_tags.append("loop")
            else:
                content_tags.append("oneshot")
                
            return {
                "tempo": max(60, min(200, tempo)),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
                "key": key,
                "content_tags": content_tags,
                "spectral_centroid": float(spectral_centroid),
                "brightness": float(spectral_rolloff / sr)
            }
            
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")
            return {"tempo": 120, "key": None, "content_tags": [], "spectral_centroid": 0, "brightness": 0}

    def build_enhanced_index(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º"""
        logging.info("üîç –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Å—ç–º–ø–ª–æ–≤...")
        
        enhanced_index = []
        processed = 0
        
        for root, _, files in os.walk(self.sample_dir):
            for file in files:
                if file.lower().endswith(('.wav', '.mp3', '.aiff', '.flac')):
                    full_path = os.path.join(root, file)
                    
                    try:
                        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        audio = AudioSegment.from_file(full_path)
                        duration = len(audio) / 1000
                        
                        # –ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                        filename_tags, filename_bpm, filename_key = self.analyze_filename_advanced(file)
                        
                        # –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        audio_analysis = self.analyze_audio_content(full_path)
                        
                        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        final_bpm = filename_bpm if filename_bpm != 120 else audio_analysis["tempo"]
                        final_key = filename_key or audio_analysis["key"]
                        
                        all_tags = list(set(filename_tags + audio_analysis["content_tags"]))
                        
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        category = "loop" if duration > 8 else "oneshot"
                        if "loop" in filename_tags or "loop" in file.lower():
                            category = "loop"
                        
                        entry = {
                            "path": full_path,
                            "filename": file,
                            "tempo": round(final_bpm),
                            "duration": round(duration, 3),
                            "key": final_key,
                            "category": category,
                            "tags": all_tags,
                            "spectral_centroid": audio_analysis["spectral_centroid"],
                            "brightness": audio_analysis["brightness"],
                            "relative_path": os.path.relpath(full_path, self.sample_dir)
                        }
                        
                        enhanced_index.append(entry)
                        processed += 1
                        
                        if processed % 100 == 0:
                            logging.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed} —Ñ–∞–π–ª–æ–≤")
                            
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file}: {e}")
        
        logging.info(f"üéØ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(enhanced_index)} —Å—ç–º–ø–ª–æ–≤")
        return enhanced_index

    def load_or_build_index(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞"""
        if os.path.exists(self.index_file):
            try:
                with open(self.index_file, 'r', encoding='utf-8') as f:
                    index = json.load(f)
                logging.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω –∏–Ω–¥–µ–∫—Å: {len(index)} —Å—ç–º–ø–ª–æ–≤")
                return index
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        index = self.build_enhanced_index()
        self.save_index(index)
        return index

    def save_index(self, index):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞"""
        with open(self.index_file, 'w', encoding='utf-8') as f:
            json.dump(index, f, indent=2, ensure_ascii=False)
        logging.info(f"üíæ –ò–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {self.index_file}")

    def find_semantic_matches(self, query_tag, sample_tags):
        """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ç–µ–≥–æ–≤"""
        if not sample_tags:
            return 0
            
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if query_tag in sample_tags:
            return 10
        
        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        score = 0
        query_synonyms = self.semantic_tags.get(query_tag, [query_tag])
        
        for synonym in query_synonyms:
            for sample_tag in sample_tags:
                if synonym in sample_tag or sample_tag in synonym:
                    score += 5
                elif self.fuzzy_match(synonym, sample_tag):
                    score += 3
        
        return score

    def fuzzy_match(self, a, b, threshold=0.7):
        """–ù–µ—á—ë—Ç–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫"""
        a, b = a.lower(), b.lower()
        if a == b:
            return True
        
        # –ü–æ–¥—Å—Ç—Ä–æ–∫–∞
        if a in b or b in a:
            return True
            
        # Jaccard similarity –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫
        set_a, set_b = set(a), set(b)
        intersection = len(set_a & set_b)
        union = len(set_a | set_b)
        
        return (intersection / union) > threshold if union > 0 else False

    def score_sample_advanced(self, sample, query_tags, target_tempo=120, genre_hint=None, energy_level=0.5):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞ —Å—ç–º–ø–ª–æ–≤"""
        score = 0
        sample_tags = sample.get("tags", [])
        sample_tempo = sample.get("tempo", 120)
        sample_path = sample.get("path", "").lower()
        
        # 1. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–æ—Ä–∏–Ω–≥ —Ç–µ–≥–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Å)
        tag_score = 0
        for query_tag in query_tags:
            semantic_score = self.find_semantic_matches(query_tag, sample_tags)
            tag_score += semantic_score
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–≥–æ–≤–æ–≥–æ —Å–∫–æ—Ä–∞
        if query_tags:
            tag_score = tag_score / len(query_tags)
        
        score += tag_score * 0.6  # 60% –≤–µ—Å–∞
        
        # 2. –¢–µ–º–ø–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–±–æ–ª–µ–µ –≥–∏–±–∫–∞—è)
        tempo_diff = abs(sample_tempo - target_tempo)
        if tempo_diff <= 5:
            tempo_score = 20
        elif tempo_diff <= 10:
            tempo_score = 15
        elif tempo_diff <= 20:
            tempo_score = 10
        elif tempo_diff <= 40:
            tempo_score = 5
        else:
            tempo_score = 1  # –í—Å—ë —Ä–∞–≤–Ω–æ –¥–∞—ë–º —à–∞–Ω—Å
            
        score += tempo_score * 0.2  # 20% –≤–µ—Å–∞
        
        # 3. –ñ–∞–Ω—Ä–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        genre_score = 0
        if genre_hint:
            if genre_hint in sample_path:
                genre_score = 15
            elif any(g in sample_path for g in [genre_hint[:4], genre_hint[:3]]):
                genre_score = 10
                
        score += genre_score * 0.1  # 10% –≤–µ—Å–∞
        
        # 4. –ö–∞—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–∞
        quality_score = 0
        
        # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—ç–º–ø–ª—ã —Å —Ö–æ—Ä–æ—à–∏–º–∏ —Ç–µ–≥–∞–º–∏
        if len(sample_tags) > 2:
            quality_score += 5
            
        # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—ç–º–ø–ª—ã —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
        if sample.get("key"):
            quality_score += 3
            
        # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—ç–º–ø–ª—ã –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        duration = sample.get("duration", 0)
        if 1 < duration < 60:  # –û—Ç 1 —Å–µ–∫—É–Ω–¥—ã –¥–æ –º–∏–Ω—É—Ç—ã
            quality_score += 5
        
        score += quality_score * 0.1  # 10% –≤–µ—Å–∞
        
        return score

    def pick_samples_enhanced(self, required_tags, target_tempo=120, genre_hint=None, 
                            energy_level=0.5, top_k=10, min_score=5):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–¥–±–æ—Ä —Å—ç–º–ø–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        
        if not self.index:
            logging.error("‚ùå –ò–Ω–¥–µ–∫—Å –ø—É—Å—Ç!")
            return []
        
        logging.info(f"üéØ –ü–æ–∏—Å–∫ —Å—ç–º–ø–ª–æ–≤ –¥–ª—è —Ç–µ–≥–æ–≤: {required_tags}, —Ç–µ–º–ø: {target_tempo}")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
        exact_matches = []
        for sample in self.index:
            score = self.score_sample_advanced(
                sample, required_tags, target_tempo, genre_hint, energy_level
            )
            if score >= min_score:
                exact_matches.append((score, sample))
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ï—Å–ª–∏ –º–∞–ª–æ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫
        if len(exact_matches) < top_k:
            logging.info("üîÑ –†–∞—Å—à–∏—Ä—è—é –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞...")
            
            # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            for sample in self.index:
                if any((score, sample) in exact_matches for score, _ in exact_matches):
                    continue
                    
                score = self.score_sample_advanced(
                    sample, required_tags, target_tempo, genre_hint, energy_level
                )
                
                # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥
                if score >= min_score * 0.5:
                    exact_matches.append((score, sample))
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –§–æ–ª–±–µ–∫ - –±–µ—Ä—ë–º –ª—É—á—à–∏–µ –ø–æ –∂–∞–Ω—Ä—É
        if len(exact_matches) < 3:
            logging.info("üÜò –§–æ–ª–±–µ–∫: –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ —Ç–µ–º–ø—É...")
            
            for sample in self.index:
                sample_path = sample.get("path", "").lower()
                sample_tempo = sample.get("tempo", 120)
                
                # –ñ–∞–Ω—Ä–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –±–ª–∏–∑–∫–∏–π —Ç–µ–º–ø
                genre_match = genre_hint and genre_hint in sample_path
                tempo_match = abs(sample_tempo - target_tempo) <= 30
                
                if genre_match or tempo_match:
                    fallback_score = 3 + (5 if genre_match else 0) + (2 if tempo_match else 0)
                    exact_matches.append((fallback_score, sample))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç
        exact_matches.sort(key=lambda x: -x[0])
        top_samples = [sample for _, sample in exact_matches[:top_k]]
        
        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—ç–º–ø–ª–æ–≤: {len(top_samples)} (–∏–∑ {len(self.index)})")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if top_samples:
            best_sample = top_samples[0]
            logging.info(f"üèÜ –õ—É—á—à–∏–π: {best_sample['filename']} | —Ç–µ–≥–∏: {best_sample['tags']} | —Ç–µ–º–ø: {best_sample['tempo']}")
        
        return top_samples

class SmartMixer:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –ø–æ–¥–±–æ—Ä–æ–º"""
    
    def __init__(self, sample_picker):
        self.picker = sample_picker
    
    def create_enhanced_mix(self, json_data, output_dir="output"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
        os.makedirs(output_dir, exist_ok=True)
        
        tempo = json_data.get("tempo", 120)
        structure = json_data.get("structure", [])
        tracks = json_data.get("tracks", [])
        
        total_duration_sec = sum(s["duration"] for s in structure)
        total_duration_ms = int(total_duration_sec * 1000)
        
        # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π –º–∏–∫—Å
        final_mix = AudioSegment.silent(duration=total_duration_ms)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–∞–Ω—Ä –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        genre_hint = self.detect_genre_from_tracks(tracks)
        
        successful_tracks = 0
        
        for track_idx, track in enumerate(tracks):
            track_name = track.get("name", f"track_{track_idx}")
            sample_tags = track.get("sample_tags", [])
            volume = track.get("volume", -6)
            
            # –¢–∞–π–º–∏–Ω–≥ —Ç—Ä–µ–∫–∞
            starts_at_beats = track.get("starts_at", 0)
            ends_at_beats = track.get("ends_at", None)
            
            beat_duration = 60.0 / tempo
            starts_at_ms = int(starts_at_beats * beat_duration * 1000)
            ends_at_ms = int(ends_at_beats * beat_duration * 1000) if ends_at_beats else total_duration_ms
            
            track_duration_ms = ends_at_ms - starts_at_ms
            
            logging.info(f"üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–∞: {track_name} ({sample_tags})")
            
            # –ü–æ–¥–±–æ—Ä —Å—ç–º–ø–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            picked_samples = self.picker.pick_samples_enhanced(
                required_tags=sample_tags,
                target_tempo=tempo,
                genre_hint=genre_hint,
                top_k=5
            )
            
            if picked_samples:
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å—ç–º–ø–ª
                chosen_sample = picked_samples[0]
                sample_path = chosen_sample["path"]
                
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—ç–º–ø–ª
                    sample_audio = AudioSegment.from_file(sample_path)
                    
                    # –ü–æ–¥–≥–æ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if len(sample_audio) > track_duration_ms:
                        # –î–ª—è –ª—É–ø–æ–≤ - —Ä–µ–∂–µ–º, –¥–ª—è one-shots - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
                        if chosen_sample.get("category") == "loop":
                            sample_audio = sample_audio[:track_duration_ms]
                    elif len(sample_audio) < track_duration_ms:
                        # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º —Ç–∏—à–∏–Ω–æ–π
                        if chosen_sample.get("category") == "loop":
                            repeats = track_duration_ms // len(sample_audio) + 1
                            sample_audio = (sample_audio * repeats)[:track_duration_ms]
                        else:
                            # One-shot + —Ç–∏—à–∏–Ω–∞
                            pad_duration = track_duration_ms - len(sample_audio)
                            sample_audio += AudioSegment.silent(duration=pad_duration)
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º volume
                    sample_audio = sample_audio + volume
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∏–∫—Å
                    final_mix = final_mix.overlay(sample_audio, position=starts_at_ms)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º stem
                    stem_path = os.path.join(output_dir, f"{track_name}.wav")
                    sample_audio.export(stem_path, format="wav")
                    
                    successful_tracks += 1
                    logging.info(f"‚úÖ [{track_name}] –¥–æ–±–∞–≤–ª–µ–Ω: {chosen_sample['filename']}")
                    
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—ç–º–ø–ª–∞ {sample_path}: {e}")
            else:
                logging.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—ç–º–ø–ª—ã –¥–ª—è {track_name}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∏–∫—Å
        final_path = os.path.join(output_dir, "final_mix.wav")
        final_mix.export(final_path, format="wav")
        
        logging.info(f"üéõÔ∏è –ú–∏–∫—Å –≥–æ—Ç–æ–≤: {successful_tracks}/{len(tracks)} —Ç—Ä–µ–∫–æ–≤ | {final_path}")
        return final_mix, final_path

    def detect_genre_from_tracks(self, tracks):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç—Ä–µ–∫–æ–≤"""
        track_names = " ".join([t.get("name", "") for t in tracks]).lower()
        
        genre_keywords = {
            "trap": ["trap", "drill", "808", "dark"],
            "house": ["house", "groove", "dance"],
            "techno": ["techno", "tech", "industrial"],
            "ambient": ["ambient", "pad", "texture"],
            "dnb": ["dnb", "drum", "bass", "break"]
        }
        
        for genre, keywords in genre_keywords.items():
            if any(kw in track_names for kw in keywords):
                return genre
        
        return None

class EnhancedComposerEngine:
    """–ì–ª–∞–≤–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    def __init__(self, sample_dir):
        self.sample_picker = EnhancedSamplePicker(sample_dir)
        self.mixer = SmartMixer(self.sample_picker)
    
    def process_prompt(self, prompt, output_dir="output"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—Ä–µ–∫–∞"""
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–º–ø—Ç–∞
        extracted_info = self.parse_prompt_enhanced(prompt)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–µ–∫–∞
        track_structure = self.create_track_structure(extracted_info)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –æ—Ç—á—ë—Ç–∞
        json_path = os.path.join(output_dir, "track_report.json")
        os.makedirs(output_dir, exist_ok=True)
        
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(track_structure, f, indent=2, ensure_ascii=False)
        
        logging.info(f"üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {json_path}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Å–∞
        final_mix, final_path = self.mixer.create_enhanced_mix(track_structure, output_dir)
        
        return final_path, track_structure

    def parse_prompt_enhanced(self, prompt):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–º–ø—Ç–∞"""
        prompt_lower = prompt.lower()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ BPM
        bpm_match = re.search(r'(\d{2,3})\s*bpm', prompt_lower)
        tempo = int(bpm_match.group(1)) if bpm_match else 120
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞
        genre = self.detect_genre_from_prompt(prompt_lower)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        mood_tags = self.extract_mood_tags(prompt_lower)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        instrument_mentions = self.extract_instruments(prompt_lower)
        
        return {
            "tempo": tempo,
            "genre": genre,
            "mood": mood_tags,
            "instruments": instrument_mentions,
            "original_prompt": prompt
        }

    def detect_genre_from_prompt(self, prompt):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
        genre_patterns = {
            "trap": ["trap", "drill", "–∞–≥—Ä–µ—Å—Å–∏–≤–Ω", "—Ç—ë–º–Ω", "–∂—ë—Å—Ç–∫"],
            "house": ["house", "groove", "—Ç–∞–Ω—Ü", "–¥–∏—Å–∫–æ"],
            "techno": ["techno", "—Ç–µ—Ö–Ω–∏—á–Ω", "–∏–Ω–¥–∞—Å—Ç—Ä–∏–∞–ª", "–º–∏–Ω–∏–º–∞–ª"],
            "ambient": ["ambient", "–∞—Ç–º–æ—Å—Ñ–µ—Ä", "—Ä–∞—Å—Å–ª–∞–±–ª", "–º–µ–¥–∏—Ç–∞—Ç"],
            "dnb": ["dnb", "drum", "bass", "—ç–Ω–µ—Ä–≥", "–±—ã—Å—Ç—Ä"]
        }
        
        for genre, patterns in genre_patterns.items():
            if any(p in prompt for p in patterns):
                return genre
        
        return "electronic"  # –¥–µ—Ñ–æ–ª—Ç

    def extract_mood_tags(self, prompt):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        mood_patterns = {
            "dark": ["–º—Ä–∞—á–Ω", "—Ç—ë–º–Ω", "–∑–ª–æ–π", "–∞–≥—Ä–µ—Å—Å–∏–≤–Ω"],
            "energetic": ["—ç–Ω–µ—Ä–≥", "–¥—Ä–∞–π–≤", "–º–æ—â–Ω", "–≥—Ä–æ–º–∫"],
            "melodic": ["–º–µ–ª–æ–¥–∏—á–Ω", "–∫—Ä–∞—Å–∏–≤", "–≥–∞—Ä–º–æ–Ω"],
            "aggressive": ["–∞–≥—Ä–µ—Å—Å–∏–≤–Ω", "–∂—ë—Å—Ç–∫", "–∑–ª–æ–π", "—Ä–µ–∑–∫"],
            "chill": ["—Å–ø–æ–∫–æ–π–Ω", "—Ä–∞—Å—Å–ª–∞–±–ª", "–º—è–≥–∫", "—Ç—ë–ø–ª"],
            "modern": ["—Å–æ–≤—Ä–µ–º–µ–Ω", "—Ç–µ—Ö–Ω–∏—á–Ω", "—Ü–∏—Ñ—Ä–æ–≤"],
            "atmospheric": ["–∞—Ç–º–æ—Å—Ñ–µ—Ä", "–≤–æ–∑–¥—É—à–Ω", "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤"]
        }
        
        found_moods = []
        for mood, patterns in mood_patterns.items():
            if any(p in prompt for p in patterns):
                found_moods.append(mood)
        
        return found_moods

    def extract_instruments(self, prompt):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        instrument_patterns = {
            "vocal": ["–≤–æ–∫–∞–ª", "–≥–æ–ª–æ—Å", "–ø–µ–Ω–∏"],
            "piano": ["–ø–∏–∞–Ω", "–∫–ª–∞–≤–∏—à"],
            "guitar": ["–≥–∏—Ç–∞—Ä"],
            "drums": ["–±–∞—Ä–∞–±–∞–Ω", "–¥—Ä–∞–º", "—É–¥–∞—Ä–Ω"],
            "bass": ["–±–∞—Å", "808"],
            "synth": ["—Å–∏–Ω—Ç", "—ç–ª–µ–∫—Ç—Ä–æ–Ω"]
        }
        
        found_instruments = []
        for instrument, patterns in instrument_patterns.items():
            if any(p in prompt for p in patterns):
                found_instruments.append(instrument)
        
        return found_instruments

    def create_track_structure(self, extracted_info):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        tempo = extracted_info["tempo"]
        genre = extracted_info["genre"]
        mood = extracted_info["mood"]
        instruments = extracted_info["instruments"]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ–∫—Ü–∏–π
        structure = self.generate_sections_by_genre(genre, tempo)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤
        tracks = self.generate_tracks_by_genre(genre, mood, instruments, tempo)
        
        return {
            "tempo": tempo,
            "genre": genre,
            "mood": mood,
            "structure": structure,
            "tracks": tracks,
            "metadata": {
                "created_by": "WaveDream Enhanced",
                "prompt": extracted_info["original_prompt"]
            }
        }

    def generate_sections_by_genre(self, genre, tempo):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ–∫—Ü–∏–π –ø–æ –∂–∞–Ω—Ä—É"""
        if genre == "trap":
            return [
                {"type": "intro", "duration": 8, "start": 0},
                {"type": "verse", "duration": 16, "start": 8},
                {"type": "hook", "duration": 16, "start": 24},
                {"type": "verse", "duration": 16, "start": 40},
                {"type": "hook", "duration": 16, "start": 56},
                {"type": "bridge", "duration": 8, "start": 72},
                {"type": "outro", "duration": 8, "start": 80}
            ]
        elif genre == "house":
            return [
                {"type": "intro", "duration": 16, "start": 0},
                {"type": "build", "duration": 16, "start": 16},
                {"type": "drop", "duration": 32, "start": 32},
                {"type": "break", "duration": 16, "start": 64},
                {"type": "drop", "duration": 32, "start": 80},
                {"type": "outro", "duration": 16, "start": 112}
            ]
        elif genre == "ambient":
            return [
                {"type": "intro", "duration": 20, "start": 0},
                {"type": "development", "duration": 40, "start": 20},
                {"type": "climax", "duration": 30, "start": 60},
                {"type": "resolution", "duration": 30, "start": 90}
            ]
        else:  # electronic default
            return [
                {"type": "intro", "duration": 8, "start": 0},
                {"type": "build", "duration": 16, "start": 8},
                {"type": "drop", "duration": 24, "start": 24},
                {"type": "break", "duration": 8, "start": 48},
                {"type": "drop", "duration": 24, "start": 56},
                {"type": "outro", "duration": 8, "start": 80}
            ]

    def generate_tracks_by_genre(self, genre, mood, instruments, tempo):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–æ–≤ –ø–æ –∂–∞–Ω—Ä—É —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        tracks = []
        
        # –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä—É
        if genre == "trap":
            base_tracks = [
                {"name": "Kick", "sample_tags": ["kick", "808", "sub"], "volume": -3, "starts_at": 0},
                {"name": "Snare", "sample_tags": ["snare", "clap", "crack"], "volume": -6, "starts_at": 8},
                {"name": "HiHats", "sample_tags": ["hihat", "hat", "cymbal"], "volume": -9, "starts_at": 4},
                {"name": "Bass", "sample_tags": ["bass", "808", "sub", "reese"], "volume": -6, "starts_at": 8},
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–ª–æ–¥–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if "melodic" in mood or "piano" in instruments:
                base_tracks.append({
                    "name": "Lead", "sample_tags": ["lead", "melody", "synth", "piano"], 
                    "volume": -9, "starts_at": 16
                })
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∫–∞–ª –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç
            if "vocal" in instruments:
                base_tracks.append({
                    "name": "Vocal", "sample_tags": ["vocal", "voice", "vox", "rap"], 
                    "volume": -6, "starts_at": 24
                })
                
        elif genre == "house":
            base_tracks = [
                {"name": "Kick", "sample_tags": ["kick", "four_on_floor"], "volume": -3, "starts_at": 0},
                {"name": "HiHats", "sample_tags": ["hihat", "groove", "swing"], "volume": -9, "starts_at": 0},
                {"name": "Bass", "sample_tags": ["bass", "groove", "funky"], "volume": -6, "starts_at": 16},
                {"name": "Lead", "sample_tags": ["lead", "piano", "organ", "synth"], "volume": -6, "starts_at": 32}
            ]
            
        elif genre == "ambient":
            base_tracks = [
                {"name": "Pad", "sample_tags": ["pad", "ambient", "texture"], "volume": -9, "starts_at": 0},
                {"name": "Texture", "sample_tags": ["fx", "ambient", "drone"], "volume": -12, "starts_at": 10},
                {"name": "Melody", "sample_tags": ["piano", "bell", "soft"], "volume": -9, "starts_at": 20}
            ]
            
        else:  # electronic default
            base_tracks = [
                {"name": "Drums", "sample_tags": ["kick", "snare", "hihat"], "volume": -3, "starts_at": 0},
                {"name": "Bass", "sample_tags": ["bass", "sub"], "volume": -6, "starts_at": 8},
                {"name": "Lead", "sample_tags": ["lead", "synth", "melody"], "volume": -6, "starts_at": 16}
            ]
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
        if "dark" in mood:
            for track in base_tracks:
                track["sample_tags"].extend(["dark", "minor", "aggressive"])
        
        if "energetic" in mood:
            for track in base_tracks:
                track["sample_tags"].extend(["hard", "punchy", "loud"])
                track["volume"] += 2  # –ì—Ä–æ–º—á–µ
        
        return base_tracks

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–æ–º
class ProjectManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    @staticmethod
    def create_project_structure(output_dir):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞"""
        folders = ["stems", "midi", "samples_used", "reports"]
        for folder in folders:
            os.makedirs(os.path.join(output_dir, folder), exist_ok=True)
    
    @staticmethod
    def generate_project_report(track_data, output_path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        report = {
            "project_info": {
                "tempo": track_data["tempo"],
                "genre": track_data["genre"],
                "total_duration": sum(s["duration"] for s in track_data["structure"]),
                "tracks_count": len(track_data["tracks"])
            },
            "structure_breakdown": track_data["structure"],
            "tracks_breakdown": track_data["tracks"],
            "generation_stats": {
                "successful_tracks": len([t for t in track_data["tracks"] if t.get("sample_tags")]),
                "fallback_tracks": 0  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –º–∏–∫—Å–µ
            }
        }
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    import argparse
    
    parser = argparse.ArgumentParser(description="üéº WaveDream Enhanced - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏")
    parser.add_argument("--prompt", type=str, required=True, help="–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    parser.add_argument("--sample-dir", type=str, required=True, help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Å—ç–º–ø–ª–∞–º–∏")
    parser.add_argument("--output-dir", type=str, default="output_enhanced", help="–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
    parser.add_argument("--rebuild-index", action="store_true", help="–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å —Å—ç–º–ø–ª–æ–≤")
    parser.add_argument("--debug", action="store_true", help="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
    
    args = parser.parse_args()
    
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
    engine = EnhancedComposerEngine(args.sample_dir)
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.rebuild_index:
        logging.info("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞...")
        engine.sample_picker.index = engine.sample_picker.build_enhanced_index()
        engine.sample_picker.save_index(engine.sample_picker.index)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    ProjectManager.create_project_structure(args.output_dir)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–∞
    logging.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: '{args.prompt}'")
    
    try:
        final_path, track_data = engine.process_prompt(args.prompt, args.output_dir)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
        report_path = os.path.join(args.output_dir, "reports", "project_report.json")
        ProjectManager.generate_project_report(track_data, report_path)
        
        logging.info(f"üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logging.info(f"üìÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫: {final_path}")
        logging.info(f"üìä –û—Ç—á—ë—Ç: {report_path}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_samples = len(engine.sample_picker.index)
        used_samples = len([t for t in track_data["tracks"] if t.get("sample_tags")])
        
        print(f"\n{'='*50}")
        print(f"üéµ –†–ï–ó–£–õ–¨–¢–ê–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò")
        print(f"{'='*50}")
        print(f"–ñ–∞–Ω—Ä: {track_data['genre']}")
        print(f"–¢–µ–º–ø: {track_data['tempo']} BPM")
        print(f"–¢—Ä–µ–∫–æ–≤: {len(track_data['tracks'])}")
        print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sum(s['duration'] for s in track_data['structure'])} —Å–µ–∫")
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å—ç–º–ø–ª–æ–≤: {used_samples}")
        print(f"–í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {total_samples}")
        print(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {final_path}")
        print(f"{'='*50}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏

class DebugTools:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    
    @staticmethod
    def test_sample_picker(sample_dir, test_tags=None):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–±–æ—Ä–∞ —Å—ç–º–ø–ª–æ–≤"""
        picker = EnhancedSamplePicker(sample_dir)
        
        test_cases = test_tags or [
            ["kick", "trap"],
            ["bass", "808"],
            ["lead", "synth"],
            ["vocal", "rap"],
            ["hihat", "trap"],
            ["piano", "melodic"]
        ]
        
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ë–û–†–ê –°–≠–ú–ü–õ–û–í")
        print("="*60)
        
        for tags in test_cases:
            print(f"\nüéØ –¢–µ—Å—Ç —Ç–µ–≥–æ–≤: {tags}")
            results = picker.pick_samples_enhanced(tags, target_tempo=140, top_k=3)
            
            if results:
                for i, sample in enumerate(results, 1):
                    print(f"  {i}. {sample['filename']}")
                    print(f"     –¢–µ–≥–∏: {sample['tags']}")
                    print(f"     –¢–µ–º–ø: {sample['tempo']} BPM")
            else:
                print("  ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    @staticmethod
    def analyze_index_quality(sample_dir):
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
        picker = EnhancedSamplePicker(sample_dir)
        index = picker.index
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–≥–æ–≤
        all_tags = []
        empty_tags = 0
        tempo_distribution = []
        
        for sample in index:
            tags = sample.get("tags", [])
            if not tags:
                empty_tags += 1
            else:
                all_tags.extend(tags)
            
            tempo_distribution.append(sample.get("tempo", 120))
        
        tag_counter = Counter(all_tags)
        
        print("\nüìä –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ò–ù–î–ï–ö–°–ê")
        print("="*60)
        print(f"–í—Å–µ–≥–æ —Å—ç–º–ø–ª–æ–≤: {len(index)}")
        print(f"–ë–µ–∑ —Ç–µ–≥–æ–≤: {empty_tags} ({empty_tags/len(index)*100:.1f}%)")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: {len(tag_counter)}")
        print(f"\nüè∑Ô∏è –¢–æ–ø-10 —Ç–µ–≥–æ–≤:")
        
        for tag, count in tag_counter.most_common(10):
            print(f"  {tag}: {count}")
        
        print(f"\nüéµ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–∞:")
        tempo_ranges = {
            "Slow (60-90)": len([t for t in tempo_distribution if 60 <= t < 90]),
            "Medium (90-130)": len([t for t in tempo_distribution if 90 <= t < 130]),
            "Fast (130-180)": len([t for t in tempo_distribution if 130 <= t < 180]),
            "Very Fast (180+)": len([t for t in tempo_distribution if t >= 180])
        }
        
        for range_name, count in tempo_ranges.items():
            print(f"  {range_name}: {count}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è quick start
QUICK_START_CONFIG = {
    "sample_directories": {
        "default": "D:\\0\\—à–∞–±–ª–æ–Ω—ã\\Samples for AKAI",
        "backup": "samples"  # fallback –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    },
    "output_directory": "wavedream_output",
    "test_prompts": [
        "trap —Å –≤–æ–∫–∞–ª–æ–º 160bpm –º—Ä–∞—á–Ω—ã–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π",
        "house groove 125bpm melodic danceable", 
        "ambient atmospheric 80bpm relaxing chill",
        "techno industrial 130bpm hard driving"
    ]
}

def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    config = QUICK_START_CONFIG
    sample_dir = config["sample_directories"]["default"]
    
    if not os.path.exists(sample_dir):
        sample_dir = config["sample_directories"]["backup"]
        if not os.path.exists(sample_dir):
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Å—ç–º–ø–ª–∞–º–∏")
            return
    
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç WaveDream Enhanced")
    print(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—ç–º–ø–ª—ã –∏–∑: {sample_dir}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–±–æ—Ä —Å—ç–º–ø–ª–æ–≤
    DebugTools.test_sample_picker(sample_dir)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω–¥–µ–∫—Å–∞
    DebugTools.analyze_index_quality(sample_dir)
    
    print("\n‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")

# –ó–∞–ø—É—Å–∫ quick test –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ –º–æ–¥—É–ª—è
if __name__ == "__main__" and len(os.sys.argv) == 1:
    quick_test()