# pipeline.py - –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–æ—ç—Ç–∞–ø–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
import os
import io
import asyncio
import logging
import time
import random
import requests
from export import ExportManager
from pydub import AudioSegment
from pydub.generators import Sine, Square, WhiteNoise
from pydub.effects import normalize
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
import json

from config import config, GenreType, MasteringPurpose
from mistral_client import query_structured_music
from metadata import MetadataProcessor
from sample_engine import SemanticSampleEngine
from musicgen_wrapper import MusicGenEngine
from mastering import SmartMasteringEngine
from verification import MixVerifier
from sample_engine import EffectsChain
from export import ExportManager


@dataclass
class GenerationRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç—Ä–µ–∫–∞"""
    prompt: str
    genre: Optional[str] = None
    bpm: Optional[int] = None
    duration: Optional[int] = None
    mastering_purpose: str = "personal"
    output_dir: str = "output"
    export_stems: bool = True
    custom_structure: Optional[List[Dict]] = None
    sample_tags: Optional[List[str]] = None
    energy_level: float = 0.5
    creativity_factor: float = 0.7

@dataclass 
class GenerationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–∫–∞"""
    success: bool
    final_path: Optional[str] = None
    structure_data: Optional[Dict] = None
    used_samples: Optional[List[Dict]] = None
    mastering_config: Optional[Dict] = None
    mastering_report: Optional[Dict] = None
    generation_time: float = 0.0
    quality_score: float = 0.0
    error_message: Optional[str] = None
    intermediate_files: Optional[Dict[str, str]] = None


class WaveDreamPipeline:
    """
    –ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ pipeline –¥–ª—è WaveDream Enhanced Pro —Å –ø–æ—ç—Ç–∞–ø–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    
    –≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:
    1. prepare_metadata() - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    2. detect_genre() - –î–µ—Ç–µ–∫—Ü–∏—è –∂–∞–Ω—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è  
    3. generate_structure() - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ LLaMA3/–ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    4. select_samples() - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä —Å—ç–º–ø–ª–æ–≤
    5. generate_base() - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤—ã —á–µ—Ä–µ–∑ MusicGen ‚Üí –°–û–•–†–ê–ù–ï–ù–ò–ï
    6. create_stems() - –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–µ–º–æ–≤ –∏–∑ —Å—ç–º–ø–ª–æ–≤ ‚Üí –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–ê–ñ–î–û–ì–û –°–¢–ï–ú–ê
    7. mix_tracks() - –ú–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–º–æ–≤ —Å –æ—Å–Ω–æ–≤–æ–π ‚Üí –°–û–•–†–ê–ù–ï–ù–ò–ï
    8. apply_effects() - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ ‚Üí –°–û–•–†–ê–ù–ï–ù–ò–ï
    9. master_track() - –£–º–Ω—ã–π –º–∞—Å—Ç–µ—Ä–∏–Ω–≥ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é ‚Üí –°–û–•–†–ê–ù–ï–ù–ò–ï
    10. verify_quality() - –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
    11. export_results() - –§–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π
    """
    
    def __init__(self):
        self.metadata_processor = MetadataProcessor()
        self.sample_engine = SemanticSampleEngine()
        self.musicgen_engine = MusicGenEngine()
        self.mastering_engine = SmartMasteringEngine()
        self.verifier = MixVerifier()
        self.effects_chain = EffectsChain()
        self.export_manager = ExportManager()
        
        self.logger = logging.getLogger(__name__)
        self._performance_stats = {}
        
        # –î–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self._current_project_name = None
        self._intermediate_storage = {}
        
    async def generate_track(self, request: GenerationRequest) -> GenerationResult:
        """
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        start_time = time.time()

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
            env_checks = self.export_manager.check_export_environment()

            critical_checks = ["base_dir_writable", "sufficient_space", "pydub_working"]
            failed_critical = [check for check in critical_checks if not env_checks.get(check, False)]

            if failed_critical:
                error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {', '.join(failed_critical)}"
                self.logger.error(f"‚ùå {error_msg}")
                return GenerationResult(
                    success=False,
                    error_message=error_msg,
                    generation_time=time.time() - start_time
                )

            # ... –≤—Å–µ —ç—Ç–∞–ø—ã (metadata, genre, structure, samples, base, stems, mix, effects, mastering, verify, export)

            generation_time = time.time() - start_time
            self._performance_stats["total_time"] = generation_time

            result = GenerationResult(
                success=True,
                final_path=final_path or exported_files.get("final"),
                structure_data=structure,
                used_samples=selected_samples,
                mastering_config=mastering_config,
                mastering_report=mastering_report,
                generation_time=generation_time,
                quality_score=quality_report.get("overall_score", 0.0),
                intermediate_files={**self._intermediate_storage, **exported_files}
            )

            self.logger.info(f"üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {generation_time:.1f}—Å")
            self.logger.info(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {result.quality_score:.2f}/1.0")
            self.logger.info(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result.intermediate_files)}")

            return result

        except Exception as e:  # ‚Üê –≤—ã—Ä–æ–≤–Ω–µ–Ω–æ —Å try
            generation_time = time.time() - start_time
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

            try:
                if hasattr(self, '_intermediate_storage') and self._intermediate_storage:
                    self.logger.info("üö® –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")

                    emergency_audio_dict = {}
                    for stage_name, file_path in self._intermediate_storage.items():
                        if isinstance(file_path, str) and os.path.exists(file_path):
                            try:
                                with open(file_path, 'rb') as f:
                                    emergency_audio_dict[stage_name] = f.read()
                            except Exception as read_error:
                                self.logger.debug(f"Could not read {stage_name}: {read_error}")

                    if 'mastered_audio' in locals() and isinstance(locals()['mastered_audio'], bytes):
                        emergency_audio_dict['final_mastered'] = locals()['mastered_audio']

                    emergency_files = await self.export_manager.force_save_everything(
                        emergency_audio_dict,
                        request.output_dir or "emergency_output"
                    )
                    self.logger.info(f"üö® –ê–≤–∞—Ä–∏–π–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(emergency_files)} —Ñ–∞–π–ª–æ–≤")

            except Exception as save_error:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_error}")

            return GenerationResult(
                success=False,
                generation_time=generation_time,
                error_message=str(e),
                intermediate_files=getattr(self, '_intermediate_storage', {})
            )

    async def save_intermediate(self, name: str, project_name: str, audio: bytes) -> Optional[str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø async-—Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        try:
            if not audio or len(audio) == 0:
                self.logger.warning(f"‚ö†Ô∏è Empty audio for intermediate '{name}'")
                return None

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä—è–º–æ–π await –≤–º–µ—Å—Ç–æ asyncio.run()
            saved_path = await self.export_manager.save_intermediate(
                name=name,                          # –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞
                audio_bytes=audio,                  # bytes –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
                output_dir=self._current_project_name or "output"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            )

            if saved_path:
                self.logger.info(f"  üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {saved_path}")
                return saved_path
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª '{name}'")
                return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ '{name}': {e}")
            return None


    async def save_stem(self, audio: bytes, project_name: str, stem_name: str) -> Optional[str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø async-—Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–µ–º–∞
        """
        try:
            if not audio or len(audio) == 0:
                self.logger.warning(f"‚ö†Ô∏è Empty audio for stem '{stem_name}'")
                return None

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä—è–º–æ–π await –≤–º–µ—Å—Ç–æ asyncio.run()
            saved_path = await self.export_manager.save_stem(
                stem_name=stem_name,                # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                audio_bytes=audio,                  # bytes –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ  
                output_dir=self._current_project_name or "output"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            )

            if saved_path:
                self.logger.info(f"  üéõÔ∏è –°—Ç–µ–º '{stem_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {saved_path}")
                return saved_path
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–µ–º '{stem_name}'")
                return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–µ–º–∞ '{stem_name}': {e}")
            return None

    async def save_final_mix(self, audio: bytes, project_name: str) -> Optional[str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø async-—Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∏–∫—Å–∞
        """
        try:
            if not audio or len(audio) == 0:
                raise ValueError("‚ùå CRITICAL: Empty final mix audio!")
                
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä—è–º–æ–π await –≤–º–µ—Å—Ç–æ asyncio.run()
            saved_files = await self.export_manager.save_final_mix(
                project_name=project_name,          # –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
                audio_bytes=audio,                  # bytes —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ
                output_dir=self._current_project_name or "output",  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                formats=["wav", "mp3"]              # –§–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            )
            
            if saved_files:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É WAV –∏–ª–∏ MP3
                main_file = (
                    saved_files.get("final_wav") 
                    or saved_files.get("final_mp3") 
                    or list(saved_files.values())[0]
                )
                self.logger.info(f"  üéµ –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∏–∫—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {len(saved_files)} —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
                return main_file
            else:
                raise ValueError("‚ùå CRITICAL: No final mix files were saved!")
                
        except Exception as e:
            self.logger.error(f"‚ùå CRITICAL: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∏–∫—Å–∞: {e}")
            raise
    
    # === –≠–¢–ê–ü–´ PIPELINE (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º) ===
    
    async def _step_prepare_metadata(self, request: GenerationRequest) -> Dict:
        """–≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        start_time = time.time()
        
        metadata = {
            "original_prompt": request.prompt,
            "timestamp": time.time(),
            "request_id": f"wd_{int(time.time())}",
        }
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        prompt_analysis = self.metadata_processor.analyze_prompt(request.prompt)
        metadata.update(prompt_analysis)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
        extracted_params = self.metadata_processor.extract_parameters(request.prompt)
        
        metadata.update({
            "detected_bpm": extracted_params.get("bpm", request.bpm),
            "detected_key": extracted_params.get("key"),
            "detected_mood": extracted_params.get("mood", []),
            "detected_instruments": extracted_params.get("instruments", []),
            "detected_tags": extracted_params.get("tags", []),
            "energy_level": request.energy_level,
            "creativity_factor": request.creativity_factor
        })
        
        processing_time = time.time() - start_time
        self._performance_stats["metadata_time"] = processing_time
        
        self.logger.info(f"  üìä –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: BPM={metadata.get('detected_bpm')}, "
                        f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã={len(metadata.get('detected_instruments', []))}")
        self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
        
        return metadata
    
    async def _step_detect_genre(self, request: GenerationRequest, metadata: Dict) -> Dict:
        """–≠—Ç–∞–ø 2: –î–µ—Ç–µ–∫—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∂–∞–Ω—Ä–∞"""
        start_time = time.time()
        
        if request.genre:
            # –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞
            detected_genre = request.genre.lower()
            self.logger.info(f"  üé≠ –ñ–∞–Ω—Ä –∑–∞–¥–∞–Ω –≤—Ä—É—á–Ω—É—é: {detected_genre}")
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è
            detected_genre = self.metadata_processor.detect_genre(
                request.prompt, metadata.get("detected_tags", [])
            )
            self.logger.info(f"  üé≠ –ñ–∞–Ω—Ä –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {detected_genre}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∂–∞–Ω—Ä–∞
        genre_config = config.get_genre_config(detected_genre)
        if not genre_config:
            self.logger.warning(f"  ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∂–∞–Ω—Ä {detected_genre}, –∏—Å–ø–æ–ª—å–∑—É–µ–º trap")
            detected_genre = "trap"
            genre_config = config.get_genre_config("trap")
        
        genre_info = {
            "name": detected_genre,
            "config": genre_config,
            "bpm_range": genre_config.bpm_range,
            "target_bpm": metadata.get("detected_bpm") or 
                         (genre_config.bpm_range[0] + genre_config.bpm_range[1]) // 2,
            "energy_range": genre_config.energy_range,
            "mastering_style": genre_config.mastering_style,
            "energy_level": metadata.get("energy_level", 0.5)
        }
        
        processing_time = time.time() - start_time
        self._performance_stats["genre_detection_time"] = processing_time
        self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
        
        return genre_info
    
    async def _step_generate_structure(
        self, request: GenerationRequest, metadata: Dict, genre_info: Dict
    ) -> Dict:
        """–≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–µ–∫–∞"""
        start_time = time.time()

        if request.custom_structure:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            structure = {
                "sections": request.custom_structure,
                "total_duration": sum(s.get("duration", 8) for s in request.custom_structure),
                "source": "custom"
            }
            self.logger.info(f"  üèóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(structure['sections'])} —Å–µ–∫—Ü–∏–π")
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ LLaMA3 –∏–ª–∏ fallback
            try:
                llama_response = query_structured_music(request.prompt)

                if not llama_response:
                    raise ValueError("LLaMA3 –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")

                structure = {
                    "sections": llama_response["structure"],
                    "total_duration": sum(s["duration"] for s in llama_response["structure"]),
                    "source": "llama3-music"
                }

                self.logger.info(f"  üß† –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç LLaMA3: {len(structure['sections'])} —Å–µ–∫—Ü–∏–π")

            except Exception as e:
                self.logger.warning(f"  ‚ö†Ô∏è LLaMA3 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
                structure = self._generate_fallback_structure(genre_info, request.duration)
                structure["source"] = "fallback"

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        structure = self._validate_structure(structure, genre_info)

        processing_time = time.time() - start_time
        self._performance_stats["structure_time"] = processing_time

        self.logger.info(f"  ‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {structure['total_duration']}—Å")
        self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")

        return structure
    
    async def _step_select_samples(
        self, request: GenerationRequest, metadata: Dict, genre_info: Dict, structure: Dict
    ) -> List[Dict]:
        """–≠—Ç–∞–ø 4: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä —Å—ç–º–ø–ª–æ–≤"""
        start_time = time.time()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ —Ç–µ–≥–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        required_tags = set()
        required_tags.update(metadata.get("detected_instruments", []))
        required_tags.update(metadata.get("detected_tags", []))
        required_tags.update(genre_info["config"].core_instruments)
        
        if request.sample_tags:
            required_tags.update(request.sample_tags)
        
        selected_samples = []
        
        # –ü–æ–¥–±–∏—Ä–∞–µ–º —Å—ç–º–ø–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
        for section in structure["sections"]:
            section_type = section.get("type", "unknown")
            section_energy = section.get("energy", 0.5)
            
            self.logger.info(f"  üéØ –°–µ–∫—Ü–∏—è '{section_type}': —ç–Ω–µ—Ä–≥–∏—è {section_energy}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–µ–∫—Ü–∏–∏
            section_instruments = self._get_section_instruments(
                section_type, genre_info, section_energy
            )
            
            # –ü–æ–¥–±–∏—Ä–∞–µ–º —Å—ç–º–ø–ª—ã —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –¥–≤–∏–∂–æ–∫
            section_samples = await self.sample_engine.find_samples(
                tags=list(required_tags),
                instruments=section_instruments,
                genre=genre_info["name"],
                bpm=genre_info["target_bpm"],
                energy=section_energy,
                max_results=len(section_instruments)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ü–∏–∏ –∫ —Å—ç–º–ø–ª–∞–º
            for sample in section_samples:
                sample["section"] = section_type
                sample["section_energy"] = section_energy
                selected_samples.append(sample)
        
        processing_time = time.time() - start_time
        self._performance_stats["sample_selection_time"] = processing_time
        
        self.logger.info(f"  ‚úÖ –ü–æ–¥–æ–±—Ä–∞–Ω–æ —Å—ç–º–ø–ª–æ–≤: {len(selected_samples)}")
        self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
        
        return selected_samples
    
    async def _step_generate_base(
        self, request: GenerationRequest, metadata: Dict, 
        genre_info: Dict, structure: Dict
    ) -> bytes:
        """–≠—Ç–∞–ø 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤—ã —á–µ—Ä–µ–∑ MusicGen"""
        start_time = time.time()
        
        # –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è MusicGen
        enhanced_prompt = self._create_musicgen_prompt(
            request.prompt, genre_info, metadata
        )
        
        duration = structure["total_duration"]
        
        self.logger.info(f"  üéº MusicGen –ø—Ä–æ–º–ø—Ç: '{enhanced_prompt[:100]}...'")
        self.logger.info(f"  ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}—Å")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Ä–æ–∂–∫—É
        base_audio = await self.musicgen_engine.generate(
            prompt=enhanced_prompt,
            duration=duration,
            temperature=metadata.get("creativity_factor", 0.7),
            genre_hint=genre_info["name"]
        )
        
        processing_time = time.time() - start_time
        self._performance_stats["musicgen_time"] = processing_time
        
        self.logger.info(f"  üéº –ë–∞–∑–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {len(base_audio)} bytes")
        self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
        
        return base_audio
    
    async def _step_create_stems(
        self, selected_samples: List[Dict], structure: Dict, genre_info: Dict
    ) -> Dict[str, bytes]:
        """–≠—Ç–∞–ø 6: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–µ–º–æ–≤ –∏–∑ —Å—ç–º–ø–ª–æ–≤"""
        start_time = time.time()
        
        stems = {}
        total_duration_ms = int(structure["total_duration"] * 1000)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—ç–º–ø–ª—ã –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        instrument_groups = {}
        for sample in selected_samples:
            instrument = sample.get("instrument_role", "unknown")
            if instrument not in instrument_groups:
                instrument_groups[instrument] = []
            instrument_groups[instrument].append(sample)
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        for instrument, samples in instrument_groups.items():
            self.logger.info(f"  üéõÔ∏è –°–æ–∑–¥–∞—ë–º —Å—Ç–µ–º: {instrument} ({len(samples)} —Å—ç–º–ø–ª–æ–≤)")
            
            stem_audio = await self._create_instrument_stem(
                samples, structure, total_duration_ms, genre_info
            )
            
            stems[instrument] = stem_audio
            self.logger.info(f"    ‚úÖ –°—Ç–µ–º '{instrument}': {len(stem_audio)} bytes")
        
        processing_time = time.time() - start_time
        self._performance_stats["stems_creation_time"] = processing_time
        
        self.logger.info(f"  üéõÔ∏è –í—Å–µ–≥–æ —Å—Ç–µ–º–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(stems)}")
        self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
        
        return stems
    
    async def _step_mix_tracks(
        self, base_audio: bytes, stems: Dict[str, bytes], genre_info: Dict
    ) -> bytes:
        """–≠—Ç–∞–ø 7: –ú–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã —Å–æ —Å—Ç–µ–º–∞–º–∏"""
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Å–∞ –¥–ª—è –∂–∞–Ω—Ä–∞
        mix_settings = self._get_genre_mix_settings(genre_info["name"])
        
        self.logger.info(f"  üéöÔ∏è –ú–∏–∫—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {genre_info['name']}: "
                        f"–±–∞–∑–∞ {mix_settings['base_level']}dB, "
                        f"—Å—Ç–µ–º—ã {mix_settings['stems_level']}dB")
        
        # –ú–∏–∫—à–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–≤–∏–∂–æ–∫
        mixed_audio = await self.effects_chain.mix_layers(
            base_layer=base_audio,
            stem_layers=stems,
            mix_settings=mix_settings,
            genre_info=genre_info
        )
        
        processing_time = time.time() - start_time
        self._performance_stats["mixing_time"] = processing_time
        
        self.logger.info(f"  üéöÔ∏è –ú–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(mixed_audio)} bytes")
        self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
        
        return mixed_audio
    
    async def _step_apply_effects(
        self, mixed_audio: bytes, metadata: Dict, genre_info: Dict
    ) -> bytes:
        """–≠—Ç–∞–ø 8: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        start_time = time.time()
        
        # –°–æ–∑–¥–∞—ë–º —Ü–µ–ø–æ—á–∫—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –∂–∞–Ω—Ä–∞
        effects_config = self._get_genre_effects_config(genre_info, metadata)
        
        self.logger.info(f"  ‚ú® –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã: {', '.join(effects_config.keys())}")
        
        processed_audio = await self.effects_chain.apply_effects(
            audio=mixed_audio,
            effects_config=effects_config,
            genre_info=genre_info
        )
        
        processing_time = time.time() - start_time
        self._performance_stats["effects_time"] = processing_time
        
        self.logger.info(f"  ‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: {len(processed_audio)} bytes")
        self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
        
        return processed_audio
    
    async def _step_master_track(
        self, processed_audio: bytes, mastering_purpose: str, genre_info: Dict
    ) -> Tuple[bytes, Dict, Dict]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —ç—Ç–∞–ø –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ SmartMasteringEngine
        """
        start_time = time.time()
        
        try:
            mastering_config = config.get_mastering_config(mastering_purpose)

            self.logger.info(
                f"  üéõÔ∏è –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥ –¥–ª—è {mastering_purpose}: "
                f"LUFS {mastering_config['target_lufs']}, "
                f"–ø–æ—Ç–æ–ª–æ–∫ {mastering_config['peak_ceiling']}dB"
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π –≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥ –¥–≤–∏–∂–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π
            mastering_result = await self.mastering_engine.master_track(
                audio=processed_audio,              # bytes –∏–ª–∏ AudioSegment
                target_config=mastering_config,     # Dict —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                genre_info=genre_info,              # Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∂–∞–Ω—Ä–µ
                purpose=mastering_purpose           # str –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ (Tuple[AudioSegment, Dict])
            if isinstance(mastering_result, tuple) and len(mastering_result) == 2:
                mastered_audio_segment, applied_config = mastering_result
            else:
                raise ValueError("SmartMasteringEngine returned invalid result format")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º AudioSegment –≤ bytes –¥–ª—è pipeline
            if hasattr(mastered_audio_segment, 'export'):
                buffer = io.BytesIO()
                mastered_audio_segment.export(buffer, format="wav")
                mastered_audio_bytes = buffer.getvalue()
                buffer.close()
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                if len(mastered_audio_bytes) == 0:
                    raise ValueError("‚ùå CRITICAL: Mastering export resulted in empty bytes!")
                    
            else:
                mastered_audio_bytes = mastered_audio_segment

            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–µ (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º applied_config)
            mastering_report = applied_config.copy()

            processing_time = time.time() - start_time
            self._performance_stats["mastering_time"] = processing_time

            self.logger.info(f"  ‚úÖ –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(mastered_audio_bytes)} bytes")
            self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
            
            return mastered_audio_bytes, mastering_config, mastering_report
            
        except Exception as e:
            processing_time = time.time() - start_time
            self._performance_stats["mastering_time"] = processing_time
            
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–∞: {e}")
            self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {processing_time:.2f}—Å")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∞—É–¥–∏–æ, –∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            # –ü—É—Å—Ç—å SmartMasteringEngine —Å–∞–º —Ä–µ—à–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å fallback
            raise ValueError(f"Mastering failed: {e}")

    async def _step_verify_quality(
        self, mastered_audio: bytes, mastering_config: Dict
    ) -> Dict:
        """–≠—Ç–∞–ø 10: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞"""
        start_time = time.time()
        
        quality_report = await self.verifier.analyze_track(
            audio=mastered_audio,
            target_config=mastering_config
        )
        
        overall_score = quality_report.get("overall_score", 0.0)
        
        processing_time = time.time() - start_time
        self._performance_stats["verification_time"] = processing_time
        
        self.logger.info(f"  üîç –ö–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–∞: {overall_score:.2f}/1.0")
        self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
        
        if overall_score < 0.7:
            self.logger.warning("  ‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        return quality_report
    
    async def _step_export_results(
        self,
        request: GenerationRequest,
        mastered_audio: bytes,
        structure: Dict,
        selected_samples: List[Dict],
        mastering_config: Dict,
        intermediate_audio: Dict[str, bytes]
    ) -> Dict[str, str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —ç—Ç–∞–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –Ω–æ–≤–æ–≥–æ ExportManager
        """
        start_time = time.time()

        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ ExportManager
            export_config = {
                "output_dir": request.output_dir,
                "export_stems": request.export_stems,
                "export_formats": ["wav", "mp3"],  # –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
                "request_data": {
                    "prompt": request.prompt,
                    "genre": request.genre,
                    "bpm": request.bpm,
                    "duration": request.duration,
                    "mastering_purpose": request.mastering_purpose,
                    "energy_level": request.energy_level,
                    "creativity_factor": request.creativity_factor
                },
                "structure": structure,
                "samples": selected_samples,
                "mastering": mastering_config
            }

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ export_complete_project
            exported_files = await self.export_manager.export_complete_project(
                mastered_audio=mastered_audio,          # bytes —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
                intermediate_audio=intermediate_audio,  # Dict[str, bytes] –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
                config=export_config                    # Dict —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ - –Ω–æ–≤—ã–π ExportManager –¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–∞–º
            # await self._generate_project_report(...) - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ

            processing_time = time.time() - start_time
            self._performance_stats["export_time"] = processing_time
            
            self.logger.info(f"  üíæ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {len(exported_files)} —Ñ–∞–π–ª–æ–≤")
            self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")

            return exported_files
            
        except Exception as e:
            processing_time = time.time() - start_time
            self._performance_stats["export_time"] = processing_time
            
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            self.logger.info(f"  ‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {processing_time:.2f}—Å")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
            try:
                emergency_files = await self.export_manager.force_save_everything(
                    intermediate_audio, request.output_dir  # –ò–°–ü–†–ê–í–õ–ï–ù–ê –°–ò–ì–ù–ê–¢–£–†–ê: 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                )
                self.logger.info(f"üö® –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {len(emergency_files)} —Ñ–∞–π–ª–æ–≤")
                return emergency_files
                
            except Exception as emergency_error:
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {emergency_error}")
                raise ValueError(f"Complete export failure: {e}, emergency: {emergency_error}")
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (—É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏) ===
    
    async def _query_llama_structure(
        self, request: GenerationRequest, metadata: Dict, genre_info: Dict
    ) -> Dict:
        """–ó–∞–ø—Ä–æ—Å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫ LLaMA3"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LLaMA3
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
        raise NotImplementedError("LLaMA3 integration not implemented")
    
    def _generate_fallback_structure(self, genre_info: Dict, duration: Optional[int]) -> Dict:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ñ–∏–≥—É –∂–∞–Ω—Ä–∞
            genre_config = genre_info.get("config")

            if genre_config:
                # –ï—Å–ª–∏ genre_config —ç—Ç–æ dataclass, –ø–æ–ª—É—á–∞–µ–º default_structure
                if hasattr(genre_config, 'default_structure'):
                    default_structure = genre_config.default_structure
                elif hasattr(genre_config, '__dict__'):
                    default_structure = getattr(genre_config, 'default_structure', [])
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                    default_structure = genre_config.get("default_structure", [])
            else:
                default_structure = []

            # –ï—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é
            if not default_structure:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∂–∞–Ω—Ä–∞, —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é")
                genre_name = genre_info.get("name", "generic").lower()

                # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ –∂–∞–Ω—Ä–∞–º
                genre_structures = {
                    "trap": [
                        {"type": "intro", "duration": 8, "energy": 0.2},
                        {"type": "buildup", "duration": 8, "energy": 0.4},
                        {"type": "drop", "duration": 16, "energy": 0.9},
                        {"type": "verse", "duration": 16, "energy": 0.6},
                        {"type": "drop", "duration": 16, "energy": 0.9},
                        {"type": "outro", "duration": 8, "energy": 0.3}
                    ],
                    "lofi": [
                        {"type": "intro", "duration": 12, "energy": 0.3},
                        {"type": "main", "duration": 32, "energy": 0.5},
                        {"type": "bridge", "duration": 16, "energy": 0.4},
                        {"type": "main", "duration": 24, "energy": 0.5},
                        {"type": "outro", "duration": 16, "energy": 0.2}
                    ],
                    "dnb": [
                        {"type": "intro", "duration": 8, "energy": 0.3},
                        {"type": "buildup", "duration": 16, "energy": 0.7},
                        {"type": "drop", "duration": 32, "energy": 1.0},
                        {"type": "breakdown", "duration": 16, "energy": 0.4},
                        {"type": "drop", "duration": 24, "energy": 0.9},
                        {"type": "outro", "duration": 8, "energy": 0.2}
                    ],
                    "ambient": [
                        {"type": "intro", "duration": 20, "energy": 0.1},
                        {"type": "development", "duration": 40, "energy": 0.3},
                        {"type": "climax", "duration": 20, "energy": 0.5},
                        {"type": "resolution", "duration": 30, "energy": 0.2},
                        {"type": "outro", "duration": 20, "energy": 0.1}
                    ]
                }

                default_structure = genre_structures.get(genre_name, [
                    {"type": "intro", "duration": 8, "energy": 0.3},
                    {"type": "verse", "duration": 16, "energy": 0.5},
                    {"type": "hook", "duration": 16, "energy": 0.8},
                    {"type": "verse", "duration": 16, "energy": 0.6},
                    {"type": "hook", "duration": 16, "energy": 0.9},
                    {"type": "outro", "duration": 8, "energy": 0.4}
                ])

            target_duration = duration or 80
            current_duration = sum(s.get("duration", 8) for s in default_structure)

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            if current_duration <= 0:
                self.logger.error("‚ùå –¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–≤–Ω–∞ 0, —Å–æ–∑–¥–∞—ë–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                default_structure = [
                    {"type": "intro", "duration": 8, "energy": 0.3},
                    {"type": "main", "duration": 32, "energy": 0.7},
                    {"type": "outro", "duration": 8, "energy": 0.3}
                ]
                current_duration = 48

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            scale_factor = target_duration / current_duration
            scale_factor = max(0.3, min(scale_factor, 4.0))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏

            scaled_structure = []
            total_scaled_duration = 0

            for section in default_structure:
                original_duration = section.get("duration", 8)
                scaled_duration = max(4, int(original_duration * scale_factor))

                scaled_section = {
                    "type": section.get("type", "section"),
                    "duration": scaled_duration,
                    "energy": max(0.1, min(1.0, section.get("energy", 0.5))),
                    "start_time": total_scaled_duration
                }

                scaled_structure.append(scaled_section)
                total_scaled_duration += scaled_duration

            self.logger.info(f"‚úÖ Fallback —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(scaled_structure)} —Å–µ–∫—Ü–∏–π, {total_scaled_duration}—Å")

            return {
                "sections": scaled_structure,
                "total_duration": total_scaled_duration,
                "source": "fallback_generated"
            }

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ fallback —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–≤–∞—Ä–∏–π–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            emergency_duration = duration or 40
            return {
                "sections": [
                    {"type": "intro", "duration": 8, "energy": 0.3, "start_time": 0},
                    {"type": "main", "duration": emergency_duration - 16, "energy": 0.7, "start_time": 8},
                    {"type": "outro", "duration": 8, "energy": 0.3, "start_time": emergency_duration - 8}
                ],
                "total_duration": emergency_duration,
                "source": "emergency_fallback"
            }
    
    def _validate_structure(self, structure: Dict, genre_info: Dict) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        sections = structure.get("sections", [])
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        normalized_sections = []
        for section in sections:
            normalized_section = {
                "type": section.get("type", "unknown"),
                "duration": max(4, section.get("duration", 8)),  # –º–∏–Ω–∏–º—É–º 4 —Å–µ–∫—É–Ω–¥—ã
                "energy": max(0.1, min(1.0, section.get("energy", 0.5))),  # 0.1-1.0
                "start_time": section.get("start_time", 0)
            }
            normalized_sections.append(normalized_section)
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º start_time
        current_time = 0
        for section in normalized_sections:
            section["start_time"] = current_time
            current_time += section["duration"]
        
        return {
            "sections": normalized_sections,
            "total_duration": current_time,
            "source": structure.get("source", "unknown")
        }
    
    def _get_section_instruments(
        self, section_type: str, genre_info: Dict, energy: float
    ) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–µ–∫—Ü–∏–∏"""
        config = genre_info["config"]
        instruments = config.core_instruments.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Ç–∏–ø–∞ —Å–µ–∫—Ü–∏–∏
        if energy > 0.6 or section_type in ["hook", "drop", "climax"]:
            instruments.extend(config.optional_instruments)
        elif section_type in ["intro", "outro"] and energy < 0.4:
            # –î–ª—è —Ç–∏—Ö–∏—Ö —Å–µ–∫—Ü–∏–π –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            instruments = instruments[:2]
        
        return instruments
    
    def _create_musicgen_prompt(
        self, original_prompt: str, genre_info: Dict, metadata: Dict
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è MusicGen"""
        genre = genre_info["name"]
        bpm = genre_info["target_bpm"]
        style = genre_info["mastering_style"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–Ω—Ä–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        genre_terms = {
            "trap": ["dark", "aggressive", "urban", "melodic"],
            "lofi": ["chill", "vintage", "cozy", "nostalgic"],  
            "dnb": ["energetic", "breakbeat", "bass-heavy", "dynamic"],
            "ambient": ["ethereal", "spacious", "meditative", "peaceful"],
            "techno": ["hypnotic", "minimal", "driving", "industrial"],
        }
        
        terms = genre_terms.get(genre, ["professional", "high-quality"])
        
        enhanced_prompt = f"{original_prompt} {genre} style {bpm}bpm " + " ".join(terms[:2])
        
        return enhanced_prompt
    
    def _get_genre_mix_settings(self, genre: str) -> Dict:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Å–∞ –¥–ª—è –∂–∞–Ω—Ä–∞"""
        mix_settings = {
            "trap": {"base_level": -4, "stems_level": -5},
            "lofi": {"base_level": -5, "stems_level": -8}, 
            "dnb": {"base_level": -2, "stems_level": -4},
            "ambient": {"base_level": -6, "stems_level": -10},
            "techno": {"base_level": -3, "stems_level": -5},
        }
        
        return mix_settings.get(genre, {"base_level": -3, "stems_level": -6})
    
    def _get_genre_effects_config(self, genre_info: Dict, metadata: Dict) -> Dict:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –∂–∞–Ω—Ä–∞"""
        genre = genre_info["name"]
        energy = metadata.get("energy_level", 0.5)
        
        effects_configs = {
            "trap": {
                "reverb": {"room_size": 0.3, "wet": 0.15},
                "compression": {"ratio": 3.5, "attack": 5},
                "eq": {"low": 2, "mid": 0, "high": 3},
                "saturation": {"amount": 0.3, "type": "tube"}
            },
            "lofi": {
                "vinyl_simulation": {"crackle": 0.4, "warmth": 0.6},
                "compression": {"ratio": 2.0, "attack": 15},
                "eq": {"low": 3, "mid": -1, "high": -2},
                "tape_saturation": {"amount": 0.5}
            },
            "dnb": {
                "reverb": {"room_size": 0.2, "wet": 0.1},
                "compression": {"ratio": 4.0, "attack": 3},
                "eq": {"low": 4, "mid": 1, "high": 2},
                "distortion": {"amount": 0.2, "type": "digital"}
            },
            "ambient": {
                "reverb": {"room_size": 0.8, "wet": 0.4},
                "compression": {"ratio": 1.5, "attack": 20},
                "eq": {"low": 0, "mid": -1, "high": 1},
                "chorus": {"rate": 0.3, "depth": 0.3}
            },
            "techno": {
                "reverb": {"room_size": 0.4, "wet": 0.2},
                "compression": {"ratio": 3.0, "attack": 8},
                "eq": {"low": 3, "mid": 0, "high": 1},
                "delay": {"time": 0.125, "feedback": 0.3}
            }
        }
        
        return effects_configs.get(genre, {})
    

    async def _create_instrument_stem(
        self, samples: List[Dict], structure: Dict,
        total_duration_ms: int, genre_info: Dict
    ) -> bytes:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–µ–º–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ë–ï–ó –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏—à–∏–Ω—ã
        """
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –Ω–µ—Ç —Å—ç–º–ø–ª–æ–≤ - –ù–ï —Å–æ–∑–¥–∞–µ–º —Ç–∏—à–∏–Ω—É, –∞ —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Ç–º
            if not samples:
                self.logger.info(f"  üéõÔ∏è –ù–µ—Ç —Å—ç–º–ø–ª–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Ç–º")
                stem_audio = self._create_synthetic_rhythm(total_duration_ms, genre_info)
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å—ç–º–ø–ª—ã
                try:
                    sample_path = samples[0].get('path', samples[0].get('filename', ''))
                    if sample_path and os.path.exists(sample_path):
                        base_sample = AudioSegment.from_file(sample_path)
                        
                        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å—ç–º–ø–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏—à–∏–Ω–æ–π
                        if base_sample.max_dBFS == float('-inf'):
                            self.logger.warning(f"‚ö†Ô∏è Sample is silent, creating synthetic rhythm")
                            stem_audio = self._create_synthetic_rhythm(total_duration_ms, genre_info)
                        else:
                            # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å—ç–º–ø–ª –Ω–∞ –≤—Å—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                            repetitions = total_duration_ms // len(base_sample) + 1
                            repeated_sample = base_sample * repetitions
                            stem_audio = repeated_sample[:total_duration_ms]
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Sample file not found, creating synthetic rhythm")
                        stem_audio = self._create_synthetic_rhythm(total_duration_ms, genre_info)
                        
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Could not load sample: {e}, creating synthetic rhythm")
                    stem_audio = self._create_synthetic_rhythm(total_duration_ms, genre_info)

            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏—à–∏–Ω–æ–π
            if stem_audio.max_dBFS == float('-inf'):
                raise ValueError("‚ùå CRITICAL: Stem creation resulted in silence!")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes
            buffer = io.BytesIO()
            stem_audio.export(buffer, format="wav")
            stem_bytes = buffer.getvalue()
            buffer.close()
            
            # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: bytes –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏
            if len(stem_bytes) == 0:
                raise ValueError("‚ùå CRITICAL: Stem export resulted in empty bytes!")

            return stem_bytes

        except Exception as e:
            self.logger.error(f"‚ùå CRITICAL: Error creating instrument stem: {e}")
            raise ValueError(f"Stem creation failed: {e}")

    def _create_synthetic_rhythm(self, duration_ms: int, genre_info: Dict) -> AudioSegment:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Ç–º–∞, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤ WaveDream 2.0
        - –£—á–∏—Ç—ã–≤–∞–µ—Ç –∂–∞–Ω—Ä, BPM –∏ —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏
        - –ú–∏–Ω–∏–º—É–º –ª–∏—à–Ω–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        - –ì–æ—Ç–æ–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π pipeline –ø—Ä–∏–º–µ—Ç –∑–∞ –≤–∞–ª–∏–¥–Ω—ã–π —Ç—Ä–µ–∫
        """

        try:
            genre_name = genre_info.get('name', 'generic').lower()
            bpm = genre_info.get('target_bpm', 120)
            energy_level = genre_info.get('energy_level', 0.5)

            beat_duration = int(60000 / bpm)
            step_duration = beat_duration // 2
            bars_needed = (duration_ms // (beat_duration * 4)) + 1

            kick_freq = 60 if genre_name == 'trap' else 80
            kick = Sine(kick_freq).to_audio_segment(duration=200).apply_gain(-6 + energy_level * 4)

            snare_duration = 150 if genre_name in ['trap', 'dnb'] else 120
            snare = WhiteNoise().to_audio_segment(duration=snare_duration).apply_gain(-10 + energy_level * 4)
            snare = snare.band_pass_filter(200, 4000)

            hihat_duration = 40 if energy_level > 0.7 else 60
            hihat = WhiteNoise().to_audio_segment(duration=hihat_duration).apply_gain(-14 + energy_level * 4)
            hihat = hihat.high_pass_filter(8000)

            patterns = {
                'generic': {
                    'kick':  [1, 0, 0, 0, 1, 0, 0, 0],
                    'snare': [0, 0, 1, 0, 0, 0, 1, 0],
                    'hihat': [1, 1, 1, 1, 1, 1, 1, 1],
                },
                'trap': {
                    'kick':  [1, 0, 0, 1, 0, 0, 1, 0],
                    'snare': [0, 0, 1, 0, 0, 0, 1, 0],
                    'hihat': [1, 1, 0, 1, 1, 0, 1, 1],
                },
                'house': {
                    'kick':  [1, 0, 0, 0, 1, 0, 0, 0],
                    'snare': [0, 0, 1, 0, 0, 0, 1, 0],
                    'hihat': [0, 1, 0, 1, 0, 1, 0, 1],
                },
                'dnb': {
                    'kick':  [1, 0, 0, 0, 0, 1, 0, 0],
                    'snare': [0, 0, 1, 0, 1, 0, 1, 0],
                    'hihat': [1, 0, 1, 1, 0, 1, 0, 1],
                },
                'lofi': {
                    'kick':  [1, 0, 0, 0, 1, 0, 0, 0],
                    'snare': [0, 0, 1, 0, 0, 0, 1, 0],
                    'hihat': [0, 1, 0, 0, 0, 1, 0, 0],
                },
                'ambient': {
                    'kick':  [1, 0, 0, 0, 0, 0, 0, 0],
                    'snare': [0, 0, 0, 0, 1, 0, 0, 0],
                    'hihat': [0, 0, 1, 0, 0, 0, 1, 0],
                },
                'techno': {
                    'kick':  [1, 0, 0, 0, 1, 0, 0, 0],
                    'snare': [0, 0, 0, 0, 0, 0, 0, 0],
                    'hihat': [1, 0, 1, 0, 1, 0, 1, 0],
                }
            }

            pattern = patterns.get(genre_name, patterns['generic'])

            bar = AudioSegment.silent(duration=beat_duration * 4)

            for inst_name, inst_pattern in pattern.items():
                sound = locals()[inst_name]

                if genre_name == 'lofi':
                    sound = sound.apply_gain(-3).low_pass_filter(8000)
                elif genre_name == 'dnb' and inst_name == 'snare':
                    sound = sound.apply_gain(2)
                elif genre_name == 'ambient':
                    sound = sound.apply_gain(-5).fade_in(20).fade_out(20)

                for i, hit in enumerate(inst_pattern):
                    if hit:
                        pos = i * step_duration

                        if energy_level > 0.7 and random.random() < 0.3:
                            accented_sound = sound.apply_gain(random.randint(2, 4))
                            bar = bar.overlay(accented_sound, position=pos)
                        elif genre_name == 'trap' and inst_name == 'hihat' and random.random() < 0.4:
                            for roll_i in range(2):
                                roll_pos = pos + (roll_i * 30)
                                if roll_pos < beat_duration * 4:
                                    bar = bar.overlay(sound.apply_gain(-2), position=roll_pos)
                        else:
                            bar = bar.overlay(sound, position=pos)

            if genre_name == 'lofi':
                bar = bar.apply_gain(-2)
                if random.random() < 0.1:
                    vinyl_pop = WhiteNoise().to_audio_segment(duration=10).apply_gain(-20)
                    bar = bar.overlay(vinyl_pop, position=random.randint(0, len(bar) - 10))

            elif genre_name == 'ambient':
                bar = bar.fade_in(100).fade_out(100)

            elif genre_name == 'trap' and energy_level > 0.8:
                bar = bar.apply_gain(1)

            rhythm = AudioSegment.silent(duration=0)

            for bar_num in range(bars_needed):
                current_bar = bar

                if bar_num % 4 == 3 and energy_level > 0.5:
                    fill_sound = snare.apply_gain(-3)
                    for fill_pos in [beat_duration * 3 + step_duration, beat_duration * 3 + step_duration * 3]:
                        current_bar = current_bar.overlay(fill_sound, position=fill_pos)

                elif bar_num % 8 == 7 and genre_name in ['trap', 'dnb']:
                    current_bar = bar.overlay(AudioSegment.silent(duration=200), position=beat_duration * 3)

                rhythm += current_bar

            rhythm = rhythm[:duration_ms]

            if genre_name in ['techno', 'house']:
                rhythm = normalize(rhythm, headroom=1.0)
            elif genre_name == 'ambient':
                rhythm = normalize(rhythm, headroom=6.0)
            else:
                rhythm = normalize(rhythm, headroom=3.0)

            fade_duration = min(100, duration_ms // 10)
            rhythm = rhythm.fade_in(fade_duration).fade_out(fade_duration)

            self.logger.info(f"  ‚úÖ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Ç–º –≥–æ—Ç–æ–≤: {genre_name}, {bpm}BPM, "
                             f"{duration_ms}ms, —ç–Ω–µ—Ä–≥–∏—è {energy_level:.1f}")

            return rhythm

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è synthetic rhythm: {e}")
            return AudioSegment.silent(duration=duration_ms)
    
    async def _generate_project_report(
        self, request: GenerationRequest, structure: Dict,
        selected_samples: List[Dict], mastering_config: Dict,
        exported_files: Dict[str, str]
    ) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        report_path = Path(request.output_dir) / f"{self._current_project_name}_detailed_report.md"
        
        try:
            # –°–æ–∑–¥–∞—ë–º markdown –æ—Ç—á—ë—Ç
            total_time = self._performance_stats.get('total_time', 0)
            
            report = f"""# üéµ WaveDream Enhanced Pro - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø—Ä–æ–µ–∫—Ç–∞

## üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–ü—Ä–æ–µ–∫—Ç**: {self._current_project_name}
- **–ü—Ä–æ–º–ø—Ç**: `{request.prompt}`
- **–ñ–∞–Ω—Ä**: {structure.get('detected_genre', request.genre or 'auto-detected')}
- **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: {structure['total_duration']} —Å–µ–∫—É–Ω–¥
- **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–∞**: {request.mastering_purpose}
- **–û–±—â–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**: {total_time:.1f}—Å

## ‚è±Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

| –≠—Ç–∞–ø | –í—Ä–µ–º—è (—Å–µ–∫) | % –æ—Ç –æ–±—â–µ–≥–æ |
|------|-------------|-------------|
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç—Ç–∞–ø–∞–º
            for stage, time_taken in self._performance_stats.items():
                if stage != 'total_time' and time_taken > 0:
                    percentage = (time_taken / total_time * 100) if total_time > 0 else 0
                    stage_name = stage.replace('_', ' ').title()
                    report += f"| {stage_name} | {time_taken:.2f} | {percentage:.1f}% |\n"
            
            report += f"\n## üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–∫–∞ ({len(structure['sections'])} —Å–µ–∫—Ü–∏–π)\n\n"
            report += "| ‚Ññ | –¢–∏–ø | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å | –≠–Ω–µ—Ä–≥–∏—è | –ù–∞—á–∞–ª–æ |\n"
            report += "|---|-----|--------------|---------|--------|\n"
            
            for i, section in enumerate(structure['sections'], 1):
                report += (f"| {i} | **{section['type'].title()}** | "
                          f"{section['duration']}—Å | {section['energy']:.1f} | "
                          f"{section.get('start_time', 0)}—Å |\n")
            
            report += f"\n## üéõÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—ç–º–ø–ª—ã ({len(selected_samples)})\n\n"
            
            if selected_samples:
                report += "| –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç | –§–∞–π–ª | –°–µ–∫—Ü–∏—è | –≠–Ω–µ—Ä–≥–∏—è |\n"
                report += "|------------|------|--------|----------|\n"
                
                for sample in selected_samples:
                    instrument = sample.get('instrument_role', 'unknown')
                    filename = sample.get('filename', sample.get('path', 'unknown'))
                    section = sample.get('section', 'unknown')
                    energy = sample.get('section_energy', 0.5)
                    report += f"| {instrument} | `{filename}` | {section} | {energy:.1f} |\n"
            else:
                report += "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Ç–º—ã*\n"
            
            report += f"\n## üéöÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–∞\n\n"
            report += f"- **LUFS —Ü–µ–ª—å**: {mastering_config.get('target_lufs', 'N/A')}\n" 
            report += f"- **–ü–∏–∫ –ø–æ—Ç–æ–ª–æ–∫**: {mastering_config.get('peak_ceiling', 'N/A')}dB\n"
            report += f"- **–•–∞—Ä–∞–∫—Ç–µ—Ä**: {mastering_config.get('character', 'N/A')}\n"
            report += f"- **–°—Ç–∏–ª—å**: {mastering_config.get('mastering_style', 'N/A')}\n"
            
            report += f"\n## üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(exported_files)})\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º
            file_groups = {
                "–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏": [],
                "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–µ—Ä—Å–∏–∏": [],
                "–°—Ç–µ–º—ã": [],
                "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ": [],
                "–î—Ä—É–≥–æ–µ": []
            }
            
            for file_type, file_path in exported_files.items():
                file_name = Path(file_path).name if file_path else file_type
                
                if "final" in file_type.lower():
                    file_groups["–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏"].append(f"- **{file_type.replace('_', ' ').title()}**: `{file_name}`")
                elif "stem" in file_type.lower():
                    file_groups["–°—Ç–µ–º—ã"].append(f"- **{file_type.replace('_', ' ').title()}**: `{file_name}`")
                elif "intermediate" in file_type.lower() or file_type in ["base", "mixed", "processed"]:
                    file_groups["–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–µ—Ä—Å–∏–∏"].append(f"- **{file_type.replace('_', ' ').title()}**: `{file_name}`")
                elif "metadata" in file_type.lower() or "info" in file_type.lower() or "report" in file_type.lower():
                    file_groups["–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"].append(f"- **{file_type.replace('_', ' ').title()}**: `{file_name}`")
                else:
                    file_groups["–î—Ä—É–≥–æ–µ"].append(f"- **{file_type.replace('_', ' ').title()}**: `{file_name}`")
            
            for group_name, files in file_groups.items():
                if files:
                    report += f"\n### {group_name}\n"
                    for file_line in files:
                        report += f"{file_line}\n"
            
            report += f"\n## üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            report += "**Pipeline —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã**:\n"
            report += "1. ‚úÖ –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –¥–µ—Ç–µ–∫—Ü–∏—è –∂–∞–Ω—Ä–∞\n"
            report += "2. ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (LLaMA3/Fallback)\n" 
            report += "3. ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä —Å—ç–º–ø–ª–æ–≤\n"
            report += "4. ‚úÖ MusicGen –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã ‚Üí WAV —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ\n"
            report += "5. ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–µ–º–æ–≤ ‚Üí WAV —Ñ–∞–π–ª—ã\n"
            report += "6. ‚úÖ –ú–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí WAV —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ\n"
            report += "7. ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ ‚Üí WAV —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ\n"
            report += "8. ‚úÖ –£–º–Ω—ã–π –º–∞—Å—Ç–µ—Ä–∏–Ω–≥ ‚Üí –§–∏–Ω–∞–ª—å–Ω—ã–π WAV\n"
            report += "9. ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\n"
            report += "10. ‚úÖ –ú—É–ª—å—Ç–∏-—Ñ–æ—Ä–º–∞—Ç–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—ç—Ç–∞–ø–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            if self._intermediate_storage:
                report += f"## üíæ –ü–æ—ç—Ç–∞–ø–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ\n\n"
                report += "**–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã**:\n"
                for stage, path in self._intermediate_storage.items():
                    if isinstance(path, dict):
                        # –≠—Ç–æ —Å—Ç–µ–º—ã
                        report += f"- **{stage.title()}**: {len(path)} —Ñ–∞–π–ª–æ–≤\n"
                        for stem_name, stem_path in path.items():
                            report += f"  - `{Path(stem_path).name}`\n"
                    else:
                        # –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
                        report += f"- **{stage.title()}**: `{Path(path).name}`\n"
                report += "\n"
            
            report += f"## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n"
            purpose = request.mastering_purpose
            
            recommendations = {
                "freelance": [
                    "‚úÖ –ì–æ—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–∏",
                    "üì± –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º", 
                    "üéß –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"
                ],
                "professional": [
                    "üé¨ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ—â–∞–Ω–∏—è/–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                    "üì∫ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –≥—Ä–æ–º–∫–æ—Å—Ç–∏",
                    "üéõÔ∏è –ü–æ–ª–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω"
                ],
                "personal": [
                    "üè† –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è",
                    "üéµ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä",
                    "üîä –û—Ç–ª–∏—á–Ω–æ –∑–≤—É—á–∏—Ç –Ω–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º–∞—Ö"
                ],
                "family": [
                    "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–≤–µ–¥–µ–Ω–∏–µ",
                    "üé• –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –≤–∏–¥–µ–æ",
                    "üì± –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"
                ]
            }
            
            purpose_recs = recommendations.get(purpose, recommendations["personal"])
            for rec in purpose_recs:
                report += f"{rec}\n"
            
            report += f"\n## üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            report += f"- **WaveDream –≤–µ—Ä—Å–∏—è**: Enhanced Pro v2.0\n"
            report += f"- **–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è**: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            report += f"- **–ò—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã**: {structure.get('source', 'unknown')}\n"
            report += f"- **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞**: {self._calculate_project_size(exported_files)}\n"
            
            report += "\n---\n"
            report += "*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω WaveDream Enhanced Pro Pipeline*\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(report)
            
            self.logger.info(f"  üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")

    def _calculate_project_size(self, exported_files: Dict[str, str]) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            total_size = 0
            file_count = 0
            
            for file_path in exported_files.values():
                if file_path and isinstance(file_path, str):
                    path = Path(file_path)
                    if path.exists():
                        total_size += path.stat().st_size
                        file_count += 1
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if total_size > 1024 * 1024 * 1024:  # > 1GB
                size_str = f"{total_size / (1024 * 1024 * 1024):.1f} GB"
            elif total_size > 1024 * 1024:  # > 1MB
                size_str = f"{total_size / (1024 * 1024):.1f} MB"
            elif total_size > 1024:  # > 1KB
                size_str = f"{total_size / 1024:.1f} KB"
            else:
                size_str = f"{total_size} bytes"
            
            return f"{size_str} ({file_count} —Ñ–∞–π–ª–æ–≤)"
            
        except Exception as e:
            self.logger.error(f"Error calculating project size: {e}")
            return "unknown"

    # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–î–û–ë–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
    
    async def quick_generate(self, prompt: str, genre: str = None, duration: int = 60) -> GenerationResult:
        """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        request = GenerationRequest(
            prompt=prompt,
            genre=genre,
            duration=duration,
            mastering_purpose="personal",
            export_stems=False  # –î–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–µ–º—ã
        )
        
        return await self.generate_track(request)
    
    async def professional_generate(self, prompt: str, **kwargs) -> GenerationResult:
        """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ –≤—Å–µ–º–∏ –æ–ø—Ü–∏—è–º–∏"""
        request = GenerationRequest(
            prompt=prompt,
            mastering_purpose="professional",
            export_stems=True,
            **kwargs
        )
        
        return await self.generate_track(request)
    
    def get_performance_stats(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        return self._performance_stats.copy()
    
    def get_intermediate_files(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        return self._intermediate_storage.copy()
    
    async def test_pipeline_components(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ pipeline"""
        test_results = {}
        
        try:
            # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_test = self.export_manager.test_export_system()
            test_results["export_system"] = export_test
            
            # –¢–µ—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            metadata_test = self.metadata_processor.analyze_prompt("test trap beat")
            test_results["metadata_processor"] = bool(metadata_test)
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fallback —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            test_genre_info = {"name": "trap", "config": config.get_genre_config("trap")}
            fallback_structure = self._generate_fallback_structure(test_genre_info, 60)
            test_results["fallback_structure"] = bool(fallback_structure.get("sections"))
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Ç–º–∞
            test_rhythm = self._create_synthetic_rhythm(5000, test_genre_info)
            test_results["synthetic_rhythm"] = len(test_rhythm) > 0
            
            self.logger.info("üß™ Pipeline —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
            for component, status in test_results.items():
                status_icon = "‚úÖ" if status else "‚ùå"
                self.logger.info(f"  {status_icon} {component}: {'OK' if status else 'FAILED'}")
            
            return test_results
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è pipeline: {e}")
            return {"error": str(e)}

    def cleanup_intermediate_files(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞"""
        cleaned_count = 0
        
        try:
            for stage, path in self._intermediate_storage.items():
                if isinstance(path, dict):
                    # –°—Ç–µ–º—ã
                    for stem_path in path.values():
                        if Path(stem_path).exists():
                            Path(stem_path).unlink()
                            cleaned_count += 1
                else:
                    # –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
                    if Path(path).exists():
                        Path(path).unlink()
                        cleaned_count += 1
            
            self._intermediate_storage.clear()
            self.logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleaned_count}")
            
            return cleaned_count
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return 0


# === –°–û–ó–î–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê –ò –£–î–û–ë–ù–´–• –§–£–ù–ö–¶–ò–ô ===

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä pipeline
pipeline = WaveDreamPipeline()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def generate_track(prompt: str, **kwargs) -> GenerationResult:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–∫–∞"""
    request = GenerationRequest(prompt=prompt, **kwargs)
    return await pipeline.generate_track(request)

async def quick_beat(prompt: str, genre: str = None) -> str:
    """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    result = await pipeline.quick_generate(prompt, genre)
    return result.final_path if result.success else None

async def professional_track(prompt: str, mastering_purpose: str = "professional", **kwargs) -> GenerationResult:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–∞"""
    request = GenerationRequest(
        prompt=prompt, 
        mastering_purpose=mastering_purpose,
        export_stems=True,
        **kwargs
    )
    return await pipeline.generate_track(request)

def get_pipeline_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ pipeline"""
    return {
        "performance": pipeline.get_performance_stats(),
        "intermediate_files": pipeline.get_intermediate_files(),
        "current_project": pipeline._current_project_name
    }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è
    async def test_run():
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WaveDream Pipeline...")
        
        # –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        test_results = await pipeline.test_pipeline_components()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_results}")
        
        # –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print("\nüéµ –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        result = await quick_beat("aggressive trap beat", "trap")
        
        if result:
            print(f"‚úÖ –¢—Ä–µ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {result}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = get_pipeline_stats()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['performance']}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    import asyncio
    asyncio.run(test_run())
